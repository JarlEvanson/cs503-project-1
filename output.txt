General Unit Tests
----------------------------------------
✅: arena_alloc_can_fill
✅: arena_alloc_from_unaligned
✅: gc_handle_failed_alloc_during_collect
✅: gc_support_redundant_rooting
✅: parse_context_chaining
✅: parse_context_counting
✅: s8_copy_from_works
✅: s8_copy_works

Sprint 1
----------------------------------------
✅: lexer_lex_complex_escapes
✅: lexer_lex_nil
✅: lexer_lex_nothing
✅: lexer_lex_numbers
✅: lexer_lex_strange_symbols
✅: lexer_lex_string_suffix
✅: lexer_lex_unterminated_string
✅: lexer_lex_utf8_error
✅: parser_parse_basic_symbols
✅: parser_parse_double_nil
✅: parser_parse_nil
✅: parser_parse_simple_list
✅: parser_skip_right_parens

Sprint 2
----------------------------------------
(car (cdr ())): 
	(cdr ()): 
		(): 
		(): ()
	(cdr ()): ()
(car (cdr ())): ()
(car (car (car (cdr (cdr (cdr ())))))): 
	(car (car (cdr (cdr (cdr ()))))): 
		(car (cdr (cdr (cdr ())))): 
			(cdr (cdr (cdr ()))): 
				(cdr (cdr ())): 
					(cdr ()): 
						(): 
						(): ()
					(cdr ()): ()
				(cdr (cdr ())): ()
			(cdr (cdr (cdr ()))): ()
		(car (cdr (cdr (cdr ())))): ()
	(car (car (cdr (cdr (cdr ()))))): ()
(car (car (car (cdr (cdr (cdr ())))))): ()
(car (cdr (quote (1.000000 2.000000)))): 
	(cdr (quote (1.000000 2.000000))): 
		(quote (1.000000 2.000000)): 
		(quote (1.000000 2.000000)): (1.000000 2.000000)
	(cdr (quote (1.000000 2.000000))): (2.000000)
(car (cdr (quote (1.000000 2.000000)))): 2.000000
(cdr (car (quote ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000))))): 
	(car (quote ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000)))): 
		(quote ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000))): 
		(quote ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000))): ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000))
	(car (quote ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000)))): (1.000000 2.000000 3.000000)
(cdr (car (quote ((1.000000 2.000000 3.000000) (1.000000 2.000000 3.000000))))): (2.000000 3.000000)
(car (cdr (cdr (quote (1.000000 2.000000 3.000000))))): 
	(cdr (cdr (quote (1.000000 2.000000 3.000000)))): 
		(cdr (quote (1.000000 2.000000 3.000000))): 
			(quote (1.000000 2.000000 3.000000)): 
			(quote (1.000000 2.000000 3.000000)): (1.000000 2.000000 3.000000)
		(cdr (quote (1.000000 2.000000 3.000000))): (2.000000 3.000000)
	(cdr (cdr (quote (1.000000 2.000000 3.000000)))): (3.000000)
(car (cdr (cdr (quote (1.000000 2.000000 3.000000))))): 3.000000
✅: cadr
(car (quote (1.000000 2.000000 3.000000))): 
	(quote (1.000000 2.000000 3.000000)): 
	(quote (1.000000 2.000000 3.000000)): (1.000000 2.000000 3.000000)
(car (quote (1.000000 2.000000 3.000000))): 1.000000
(car (quote ((1.000000 2.000000 3.000000)))): 
	(quote ((1.000000 2.000000 3.000000))): 
	(quote ((1.000000 2.000000 3.000000))): ((1.000000 2.000000 3.000000))
(car (quote ((1.000000 2.000000 3.000000)))): (1.000000 2.000000 3.000000)
(car (quote (a))): 
	(quote (a)): 
	(quote (a)): (a)
(car (quote (a))): a
(car ()): 
	(): 
	(): ()
(car ()): ()
✅: car
(cdr (quote (1.000000 2.000000 3.000000))): 
	(quote (1.000000 2.000000 3.000000)): 
	(quote (1.000000 2.000000 3.000000)): (1.000000 2.000000 3.000000)
(cdr (quote (1.000000 2.000000 3.000000))): (2.000000 3.000000)
(cdr (quote ((1.000000 2.000000 3.000000) a))): 
	(quote ((1.000000 2.000000 3.000000) a)): 
	(quote ((1.000000 2.000000 3.000000) a)): ((1.000000 2.000000 3.000000) a)
(cdr (quote ((1.000000 2.000000 3.000000) a))): (a)
(cdr (quote (a))): 
	(quote (a)): 
	(quote (a)): (a)
(cdr (quote (a))): ()
(cdr ()): 
	(): 
	(): ()
(cdr ()): ()
✅: cdr
(cons 1.000000 (quote (2.000000))): 
	1.000000: 
	1.000000: 1.000000
	(quote (2.000000)): 
	(quote (2.000000)): (2.000000)
(cons 1.000000 (quote (2.000000))): (1.000000 2.000000)
(cons 1.000000 ()): 
	1.000000: 
	1.000000: 1.000000
	(): 
	(): ()
(cons 1.000000 ()): (1.000000)
(cons (cons 1.000000 ()) (cons 2.000000 ())): 
	(cons 1.000000 ()): 
		1.000000: 
		1.000000: 1.000000
		(): 
		(): ()
	(cons 1.000000 ()): (1.000000)
	(cons 2.000000 ()): 
		2.000000: 
		2.000000: 2.000000
		(): 
		(): ()
	(cons 2.000000 ()): (2.000000)
(cons (cons 1.000000 ()) (cons 2.000000 ())): ((1.000000) 2.000000)
✅: cons
(list? ()): 
	(): 
	(): ()
(list? ()): t
(list? (quote (1.000000 2.000000 3.000000 4.000000 5.000000))): 
	(quote (1.000000 2.000000 3.000000 4.000000 5.000000)): 
	(quote (1.000000 2.000000 3.000000 4.000000 5.000000)): (1.000000 2.000000 3.000000 4.000000 5.000000)
(list? (quote (1.000000 2.000000 3.000000 4.000000 5.000000))): t
(list? (quote a)): 
	(quote a): 
	(quote a): a
(list? (quote a)): ()
(list? Hello): 
	Hello: 
	Hello: Hello
(list? Hello): ()
(list? 23.000000): 
	23.000000: 
	23.000000: 23.000000
(list? 23.000000): ()
✅: is_list
(nil? ()): 
	(): 
	(): ()
(nil? ()): t
(nil? (quote a)): 
	(quote a): 
	(quote a): a
(nil? (quote a)): ()
(nil? 1.000000): 
	1.000000: 
	1.000000: 1.000000
(nil? 1.000000): ()
(nil? a): 
	a: 
	a: a
(nil? a): ()
✅: is_nil
(number? 19.000000): 
	19.000000: 
	19.000000: 19.000000
(number? 19.000000): t
(number? (quote kq)): 
	(quote kq): 
	(quote kq): kq
(number? (quote kq)): ()
(number? Hello): 
	Hello: 
	Hello: Hello
(number? Hello): ()
(number? (quote (1.000000 2.000000 3.000000 4.000000))): 
	(quote (1.000000 2.000000 3.000000 4.000000)): 
	(quote (1.000000 2.000000 3.000000 4.000000)): (1.000000 2.000000 3.000000 4.000000)
(number? (quote (1.000000 2.000000 3.000000 4.000000))): ()
✅: is_number
(string? hello): 
	hello: 
	hello: hello
(string? hello): t
(string? (quote a)): 
	(quote a): 
	(quote a): a
(string? (quote a)): ()
(string? 1.000000): 
	1.000000: 
	1.000000: 1.000000
(string? 1.000000): ()
(string? ()): 
	(): 
	(): ()
(string? ()): ()
✅: is_string
(symbol? (quote a)): 
	(quote a): 
	(quote a): a
(symbol? (quote a)): t
(symbol? 1.000000): 
	1.000000: 
	1.000000: 1.000000
(symbol? 1.000000): ()
(symbol? ()): 
	(): 
	(): ()
(symbol? ()): ()
(symbol? a): 
	a: 
	a: a
(symbol? a): ()
✅: is_symbol

Sprint 3
----------------------------------------
(+ 1.000000 2.000000): 
	1.000000: 
	1.000000: 1.000000
	2.000000: 
	2.000000: 2.000000
(+ 1.000000 2.000000): 3.000000
(+ (+ 1.000000 2.000000) (+ 4.000000 5.000000)): 
	(+ 1.000000 2.000000): 
		1.000000: 
		1.000000: 1.000000
		2.000000: 
		2.000000: 2.000000
	(+ 1.000000 2.000000): 3.000000
	(+ 4.000000 5.000000): 
		4.000000: 
		4.000000: 4.000000
		5.000000: 
		5.000000: 5.000000
	(+ 4.000000 5.000000): 9.000000
(+ (+ 1.000000 2.000000) (+ 4.000000 5.000000)): 12.000000
(+ 1.000000 (+ 2.000000 (+ 4.000000 10.000000))): 
	1.000000: 
	1.000000: 1.000000
	(+ 2.000000 (+ 4.000000 10.000000)): 
		2.000000: 
		2.000000: 2.000000
		(+ 4.000000 10.000000): 
			4.000000: 
			4.000000: 4.000000
			10.000000: 
			10.000000: 10.000000
		(+ 4.000000 10.000000): 14.000000
	(+ 2.000000 (+ 4.000000 10.000000)): 16.000000
(+ 1.000000 (+ 2.000000 (+ 4.000000 10.000000))): 17.000000
(+ -1.000000 (+ -1.000000 -2.000000)): 
	-1.000000: 
	-1.000000: -1.000000
	(+ -1.000000 -2.000000): 
		-1.000000: 
		-1.000000: -1.000000
		-2.000000: 
		-2.000000: -2.000000
	(+ -1.000000 -2.000000): -3.000000
(+ -1.000000 (+ -1.000000 -2.000000)): -4.000000
✅: add
(/ 1.000000 2.000000): 
	1.000000: 
	1.000000: 1.000000
	2.000000: 
	2.000000: 2.000000
(/ 1.000000 2.000000): 0.500000
(/ 500.000000 20.000000): 
	500.000000: 
	500.000000: 500.000000
	20.000000: 
	20.000000: 20.000000
(/ 500.000000 20.000000): 25.000000
(/ 20.000000 2.000000): 
	20.000000: 
	20.000000: 20.000000
	2.000000: 
	2.000000: 2.000000
(/ 20.000000 2.000000): 10.000000
(/ -5.000000 -5.000000): 
	-5.000000: 
	-5.000000: -5.000000
	-5.000000: 
	-5.000000: -5.000000
(/ -5.000000 -5.000000): 1.000000
(/ 2.000000 (/ 1.000000 2.000000)): 
	2.000000: 
	2.000000: 2.000000
	(/ 1.000000 2.000000): 
		1.000000: 
		1.000000: 1.000000
		2.000000: 
		2.000000: 2.000000
	(/ 1.000000 2.000000): 0.500000
(/ 2.000000 (/ 1.000000 2.000000)): 4.000000
✅: div
(eq 1.000000 1.000000): 
	1.000000: 
	1.000000: 1.000000
	1.000000: 
	1.000000: 1.000000
(eq 1.000000 1.000000): t
(eq 0.001000 0.000100): 
	0.001000: 
	0.001000: 0.001000
	0.000100: 
	0.000100: 0.000100
(eq 0.001000 0.000100): ()
(eq a b): 
	a: 
	a: a
	b: 
	b: b
(eq a b): ()
(eq a a): 
	a: 
	a: a
	a: 
	a: a
(eq a a): t
(eq 23.000000 54.000000): 
	23.000000: 
	23.000000: 23.000000
	54.000000: 
	54.000000: 54.000000
(eq 23.000000 54.000000): ()
✅: eq
(> 1.000000 2.000000): 
	1.000000: 
	1.000000: 1.000000
	2.000000: 
	2.000000: 2.000000
(> 1.000000 2.000000): ()
(> 3.000000 4.000000): 
	3.000000: 
	3.000000: 3.000000
	4.000000: 
	4.000000: 4.000000
(> 3.000000 4.000000): ()
(> 0.100000 0.010000): 
	0.100000: 
	0.100000: 0.100000
	0.010000: 
	0.010000: 0.010000
(> 0.100000 0.010000): t
(> -1.000000 -2.000000): 
	-1.000000: 
	-1.000000: -1.000000
	-2.000000: 
	-2.000000: -2.000000
(> -1.000000 -2.000000): t
✅: gt
(>= 1.000000 1.000000): 
	1.000000: 
	1.000000: 1.000000
	1.000000: 
	1.000000: 1.000000
(>= 1.000000 1.000000): t
(>= 1.000000 0.200000): 
	1.000000: 
	1.000000: 1.000000
	0.200000: 
	0.200000: 0.200000
(>= 1.000000 0.200000): t
(>= 5.000000 7.000000): 
	5.000000: 
	5.000000: 5.000000
	7.000000: 
	7.000000: 7.000000
(>= 5.000000 7.000000): ()
(>= 93284.000000 100000.000000): 
	93284.000000: 
	93284.000000: 93284.000000
	100000.000000: 
	100000.000000: 100000.000000
(>= 93284.000000 100000.000000): ()
✅: gte
(< 1.000000 2.000000): 
	1.000000: 
	1.000000: 1.000000
	2.000000: 
	2.000000: 2.000000
(< 1.000000 2.000000): t
(< 3.000000 4.000000): 
	3.000000: 
	3.000000: 3.000000
	4.000000: 
	4.000000: 4.000000
(< 3.000000 4.000000): t
(< 0.100000 0.010000): 
	0.100000: 
	0.100000: 0.100000
	0.010000: 
	0.010000: 0.010000
(< 0.100000 0.010000): ()
(< -1.000000 -2.000000): 
	-1.000000: 
	-1.000000: -1.000000
	-2.000000: 
	-2.000000: -2.000000
(< -1.000000 -2.000000): ()
✅: lt
(<= 1.000000 1.000000): 
	1.000000: 
	1.000000: 1.000000
	1.000000: 
	1.000000: 1.000000
(<= 1.000000 1.000000): t
(<= 1.000000 0.200000): 
	1.000000: 
	1.000000: 1.000000
	0.200000: 
	0.200000: 0.200000
(<= 1.000000 0.200000): ()
(<= 5.000000 7.000000): 
	5.000000: 
	5.000000: 5.000000
	7.000000: 
	7.000000: 7.000000
(<= 5.000000 7.000000): t
(<= 93284.000000 100000.000000): 
	93284.000000: 
	93284.000000: 93284.000000
	100000.000000: 
	100000.000000: 100000.000000
(<= 93284.000000 100000.000000): t
✅: lte
(% 1.000000 2.000000): 
	1.000000: 
	1.000000: 1.000000
	2.000000: 
	2.000000: 2.000000
(% 1.000000 2.000000): 1.000000
(% -2.000000 4.000000): 
	-2.000000: 
	-2.000000: -2.000000
	4.000000: 
	4.000000: 4.000000
(% -2.000000 4.000000): -2.000000
(% 24.200000 2.000000): 
	24.200000: 
	24.200000: 24.200000
	2.000000: 
	2.000000: 2.000000
(% 24.200000 2.000000): 0.200000
(% 97.500000 97.000000): 
	97.500000: 
	97.500000: 97.500000
	97.000000: 
	97.000000: 97.000000
(% 97.500000 97.000000): 0.500000
✅: mod
(* 1.000000 1.000000): 
	1.000000: 
	1.000000: 1.000000
	1.000000: 
	1.000000: 1.000000
(* 1.000000 1.000000): 1.000000
(* 1.000000 0.000000): 
	1.000000: 
	1.000000: 1.000000
	0.000000: 
	0.000000: 0.000000
(* 1.000000 0.000000): 0.000000
(* 1.000000 2.000000): 
	1.000000: 
	1.000000: 1.000000
	2.000000: 
	2.000000: 2.000000
(* 1.000000 2.000000): 2.000000
(* 1.000000 (* 2.000000 3.000000)): 
	1.000000: 
	1.000000: 1.000000
	(* 2.000000 3.000000): 
		2.000000: 
		2.000000: 2.000000
		3.000000: 
		3.000000: 3.000000
	(* 2.000000 3.000000): 6.000000
(* 1.000000 (* 2.000000 3.000000)): 6.000000
(* 1.000000 (* 2.000000 (* 3.000000 4.000000))): 
	1.000000: 
	1.000000: 1.000000
	(* 2.000000 (* 3.000000 4.000000)): 
		2.000000: 
		2.000000: 2.000000
		(* 3.000000 4.000000): 
			3.000000: 
			3.000000: 3.000000
			4.000000: 
			4.000000: 4.000000
		(* 3.000000 4.000000): 12.000000
	(* 2.000000 (* 3.000000 4.000000)): 24.000000
(* 1.000000 (* 2.000000 (* 3.000000 4.000000))): 24.000000
✅: mul
(not (quote t)): 
	(quote t): 
	(quote t): t
(not (quote t)): ()
(not ()): 
	(): 
	(): ()
(not ()): t
✅: not
(- 0.000000 0.000000): 
	0.000000: 
	0.000000: 0.000000
	0.000000: 
	0.000000: 0.000000
(- 0.000000 0.000000): 0.000000
(- 10.000000 -10.000000): 
	10.000000: 
	10.000000: 10.000000
	-10.000000: 
	-10.000000: -10.000000
(- 10.000000 -10.000000): 20.000000
(- -10.000000 -10.000000): 
	-10.000000: 
	-10.000000: -10.000000
	-10.000000: 
	-10.000000: -10.000000
(- -10.000000 -10.000000): 0.000000
(- 200.000000 20.000000): 
	200.000000: 
	200.000000: 200.000000
	20.000000: 
	20.000000: 20.000000
(- 200.000000 20.000000): 180.000000
✅: sub

Sprint 5
----------------------------------------
(quote a): 
(quote a): a
(quote b): 
(quote b): b
(quote ((quote 1.000000) 2.000000 3.000000)): 
(quote ((quote 1.000000) 2.000000 3.000000)): ((quote 1.000000) 2.000000 3.000000)
(quote test): 
(quote test): test
(quote (car 1.000000 2.000000 3.000000)): 
(quote (car 1.000000 2.000000 3.000000)): (car 1.000000 2.000000 3.000000)
✅: quote
(set x 1.000000): 
	1.000000: 
	1.000000: 1.000000
(set x 1.000000): ()
(set y 2.000000): 
	2.000000: 
	2.000000: 2.000000
(set y 2.000000): ()
(set k 3.000000): 
	3.000000: 
	3.000000: 3.000000
(set k 3.000000): ()
(+ x y): 
	x: 
	x: 1.000000
	y: 
	y: 2.000000
(+ x y): 3.000000
(+ y k): 
	y: 
	y: 2.000000
	k: 
	k: 3.000000
(+ y k): 5.000000
(+ x k): 
	x: 
	x: 1.000000
	k: 
	k: 3.000000
(+ x k): 4.000000
(set x y): 
	y: 
	y: 2.000000
(set x y): ()
(set y a): 
	a: 
	a: a
(set y a): ()
(set k (quote (1.000000 2.000000 3.000000))): 
	(quote (1.000000 2.000000 3.000000)): 
	(quote (1.000000 2.000000 3.000000)): (1.000000 2.000000 3.000000)
(set k (quote (1.000000 2.000000 3.000000))): ()
(+ x x): 
	x: 
	x: 2.000000
	x: 
	x: 2.000000
(+ x x): 4.000000
y: 
y: a
k: 
k: (1.000000 2.000000 3.000000)
✅: set
✅: vm_env_set_lookup_basic
✅: vm_env_set_lookup_multi_support
✅: vm_env_set_lookup_override

Sprint 6
----------------------------------------
(and () ()): 
	(): 
	(): ()
(and () a): 
	(): 
	(): ()
(and 1.000000 ()): 
	1.000000: 
	1.000000: 1.000000
	(): 
	(): ()
(and 1.000000 ()): ()
(and () (cons 1.000000 (quote (2.000000)))): 
	(): 
	(): ()
(and 1.000000 (cons 1.000000 (quote (2.000000)))): 
	1.000000: 
	1.000000: 1.000000
	(cons 1.000000 (quote (2.000000))): 
		1.000000: 
		1.000000: 1.000000
		(quote (2.000000)): 
		(quote (2.000000)): (2.000000)
	(cons 1.000000 (quote (2.000000))): (1.000000 2.000000)
(and 1.000000 (cons 1.000000 (quote (2.000000)))): (1.000000 2.000000)
(and (+ 0.000000 1.000000) (+ 5.000000 2.000000)): 
	(+ 0.000000 1.000000): 
		0.000000: 
		0.000000: 0.000000
		1.000000: 
		1.000000: 1.000000
	(+ 0.000000 1.000000): 1.000000
	(+ 5.000000 2.000000): 
		5.000000: 
		5.000000: 5.000000
		2.000000: 
		2.000000: 2.000000
	(+ 5.000000 2.000000): 7.000000
(and (+ 0.000000 1.000000) (+ 5.000000 2.000000)): 7.000000
✅: and
(cond (() (car (quote (1.000000 2.000000 3.000000)))) ((cdr (quote (1.000000 2.000000))) (add 1.000000 2.000000)) ((div 1.000000 2.000000) (mul 100.000000 200.000000))): 
	(): 
	(): ()
	(cdr (quote (1.000000 2.000000))): 
		(quote (1.000000 2.000000)): 
		(quote (1.000000 2.000000)): (1.000000 2.000000)
	(cdr (quote (1.000000 2.000000))): (2.000000)
	(add 1.000000 2.000000): 
		1.000000: 
		1.000000: 1.000000
		2.000000: 
		2.000000: 2.000000
	(add 1.000000 2.000000): 3.000000
(cond (() (car (quote (1.000000 2.000000 3.000000)))) ((cdr (quote (1.000000 2.000000))) (add 1.000000 2.000000)) ((div 1.000000 2.000000) (mul 100.000000 200.000000))): 3.000000
(cond (1.000000 (car (quote (1.000000 2.000000 3.000000)))) ((cdr (quote (1.000000 2.000000))) (add 1.000000 2.000000)) ((div 1.000000 2.000000) (mul 100.000000 200.000000))): 
	1.000000: 
	1.000000: 1.000000
	(car (quote (1.000000 2.000000 3.000000))): 
		(quote (1.000000 2.000000 3.000000)): 
		(quote (1.000000 2.000000 3.000000)): (1.000000 2.000000 3.000000)
	(car (quote (1.000000 2.000000 3.000000))): 1.000000
(cond (1.000000 (car (quote (1.000000 2.000000 3.000000)))) ((cdr (quote (1.000000 2.000000))) (add 1.000000 2.000000)) ((div 1.000000 2.000000) (mul 100.000000 200.000000))): 1.000000
(cond (() (car (quote (1.000000 2.000000 3.000000)))) ((cdr (quote (1.000000))) (add 1.000000 2.000000)) ((div 1.000000 2.000000) (mul 100.000000 200.000000))): 
	(): 
	(): ()
	(cdr (quote (1.000000))): 
		(quote (1.000000)): 
		(quote (1.000000)): (1.000000)
	(cdr (quote (1.000000))): ()
	(div 1.000000 2.000000): 
		1.000000: 
		1.000000: 1.000000
		2.000000: 
		2.000000: 2.000000
	(div 1.000000 2.000000): 0.500000
	(mul 100.000000 200.000000): 
		100.000000: 
		100.000000: 100.000000
		200.000000: 
		200.000000: 200.000000
	(mul 100.000000 200.000000): 20000.000000
(cond (() (car (quote (1.000000 2.000000 3.000000)))) ((cdr (quote (1.000000))) (add 1.000000 2.000000)) ((div 1.000000 2.000000) (mul 100.000000 200.000000))): 20000.000000
✅: cond
(if () 1.000000 2.000000): 
	(): 
	(): ()
	2.000000: 
	2.000000: 2.000000
(if () 1.000000 2.000000): 2.000000
(if (quote t) 2.000000 1.000000): 
	(quote t): 
	(quote t): t
	2.000000: 
	2.000000: 2.000000
(if (quote t) 2.000000 1.000000): 2.000000
(if (symbol? (quote t)) (quote l) (quote k)): 
	(symbol? (quote t)): 
		(quote t): 
		(quote t): t
	(symbol? (quote t)): t
	(quote l): 
	(quote l): l
(if (symbol? (quote t)) (quote l) (quote k)): l
(if (symbol? (quote t)) (+ 1.000000 2.000000) ()): 
	(symbol? (quote t)): 
		(quote t): 
		(quote t): t
	(symbol? (quote t)): t
	(+ 1.000000 2.000000): 
		1.000000: 
		1.000000: 1.000000
		2.000000: 
		2.000000: 2.000000
	(+ 1.000000 2.000000): 3.000000
(if (symbol? (quote t)) (+ 1.000000 2.000000) ()): 3.000000
(if (symbol? (quote t)) (+ (/ 1.000000 2.000000) 2.000000) (/ 0.000000 0.000000)): 
	(symbol? (quote t)): 
		(quote t): 
		(quote t): t
	(symbol? (quote t)): t
	(+ (/ 1.000000 2.000000) 2.000000): 
		(/ 1.000000 2.000000): 
			1.000000: 
			1.000000: 1.000000
			2.000000: 
			2.000000: 2.000000
		(/ 1.000000 2.000000): 0.500000
		2.000000: 
		2.000000: 2.000000
	(+ (/ 1.000000 2.000000) 2.000000): 2.500000
(if (symbol? (quote t)) (+ (/ 1.000000 2.000000) 2.000000) (/ 0.000000 0.000000)): 2.500000
(if (not (symbol? (quote t))) () (+ 1.000000 2.000000)): 
	(not (symbol? (quote t))): 
		(symbol? (quote t)): 
			(quote t): 
			(quote t): t
		(symbol? (quote t)): t
	(not (symbol? (quote t))): ()
	(+ 1.000000 2.000000): 
		1.000000: 
		1.000000: 1.000000
		2.000000: 
		2.000000: 2.000000
	(+ 1.000000 2.000000): 3.000000
(if (not (symbol? (quote t))) () (+ 1.000000 2.000000)): 3.000000
(if (cons 1.000000 (quote (2.000000))) (quote q) (quote w)): 
	(cons 1.000000 (quote (2.000000))): 
		1.000000: 
		1.000000: 1.000000
		(quote (2.000000)): 
		(quote (2.000000)): (2.000000)
	(cons 1.000000 (quote (2.000000))): (1.000000 2.000000)
	(quote q): 
	(quote q): q
(if (cons 1.000000 (quote (2.000000))) (quote q) (quote w)): q
(if 1.000000 (cons 1.000000 (quote (2.000000))) (quote w)): 
	1.000000: 
	1.000000: 1.000000
	(cons 1.000000 (quote (2.000000))): 
		1.000000: 
		1.000000: 1.000000
		(quote (2.000000)): 
		(quote (2.000000)): (2.000000)
	(cons 1.000000 (quote (2.000000))): (1.000000 2.000000)
(if 1.000000 (cons 1.000000 (quote (2.000000))) (quote w)): (1.000000 2.000000)
✅: if
(or () ()): 
	(): 
	(): ()
	(): 
	(): ()
(or () ()): ()
(or () 1.000000): 
	(): 
	(): ()
	1.000000: 
	1.000000: 1.000000
(or () 1.000000): 1.000000
(or 1.000000 ()): 
	1.000000: 
	1.000000: 1.000000
(or 1.000000 ()): t
(or (or 1.000000 f) (or () f)): 
	(or 1.000000 f): 
		1.000000: 
		1.000000: 1.000000
	(or 1.000000 f): t
(or (or 1.000000 f) (or () f)): t
(or (car ()) (car (quote (1.000000 2.000000 3.000000)))): 
	(car ()): 
		(): 
		(): ()
	(car ()): ()
	(car (quote (1.000000 2.000000 3.000000))): 
		(quote (1.000000 2.000000 3.000000)): 
		(quote (1.000000 2.000000 3.000000)): (1.000000 2.000000 3.000000)
	(car (quote (1.000000 2.000000 3.000000))): 1.000000
(or (car ()) (car (quote (1.000000 2.000000 3.000000)))): 1.000000
✅: or

Sprint 7
----------------------------------------
(define square (x) (* x x)): 
(define square (x) (* x x)): ()
(define cube (x) (* (square x) x)): 
(define cube (x) (* (square x) x)): ()
(square 5.000000): 
	5.000000: 
	5.000000: 5.000000
	(* x x): 
		x: 
		x: 5.000000
		x: 
		x: 5.000000
	(* x x): 25.000000
(square 5.000000): 25.000000
(cube 5.000000): 
	5.000000: 
	5.000000: 5.000000
	(* (square x) x): 
		(square x): 
			x: 
			x: 5.000000
			(* x x): 
				x: 
				x: 5.000000
				x: 
				x: 5.000000
			(* x x): 25.000000
		(square x): 25.000000
		x: 
		x: 5.000000
	(* (square x) x): 125.000000
(cube 5.000000): 125.000000
✅: define
✅: eval_context_symbol_manipulation
(define quicksort (L) (cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ()))))): 
(define quicksort (L) (cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ()))))): ()
(define partition (p L smaller larger) (cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger))))): 
(define partition (p L smaller larger) (cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger))))): ()
(define QSORT (P) (QKSORT (car P) (cadr P) (caddr P))): 
(define QSORT (P) (QKSORT (car P) (cadr P) (caddr P))): ()
(define QKSORT (left p right) (append (quicksort left) (cons p (quicksort right)))): 
(define QKSORT (left p right) (append (quicksort left) (cons p (quicksort right)))): ()
(define append (L M) (cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M))))): 
(define append (L M) (cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M))))): ()
(quicksort (quote (2.000000 1.000000))): 
	(quote (2.000000 1.000000)): 
	(quote (2.000000 1.000000)): (2.000000 1.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
		(nil? L): 
			L: 
			L: (2.000000 1.000000)
		(nil? L): ()
		(nil? (cdr L)): 
			(cdr L): 
				L: 
				L: (2.000000 1.000000)
			(cdr L): (1.000000)
		(nil? (cdr L)): ()
		(quote t): 
		(quote t): t
		(QSORT (partition (car L) (cdr L) () ())): 
			(partition (car L) (cdr L) () ()): 
				(car L): 
					L: 
					L: (2.000000 1.000000)
				(car L): 2.000000
				(cdr L): 
					L: 
					L: (2.000000 1.000000)
				(cdr L): (1.000000)
				(): 
				(): ()
				(): 
				(): ()
				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
					(nil? L): 
						L: 
						L: (1.000000)
					(nil? L): ()
					(lte (car L) p): 
						(car L): 
							L: 
							L: (1.000000)
						(car L): 1.000000
						p: 
						p: 2.000000
					(lte (car L) p): t
					(partition p (cdr L) (cons (car L) smaller) larger): 
						p: 
						p: 2.000000
						(cdr L): 
							L: 
							L: (1.000000)
						(cdr L): ()
						(cons (car L) smaller): 
							(car L): 
								L: 
								L: (1.000000)
							(car L): 1.000000
							smaller: 
							smaller: ()
						(cons (car L) smaller): (1.000000)
						larger: 
						larger: ()
						(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
							(nil? L): 
								L: 
								L: ()
							(nil? L): t
							(list3 smaller p larger): 
SExpr {
	type: CONS
	forward_ptr: (nil)
	car: 0x55555556b808 SExpr {
		type: SYMBOL
		forward_ptr: (nil)
		symbol: quicksort
	}
	cdr: 0x55555556b830 SExpr {
		type: CONS
		forward_ptr: (nil)
		car: 0x55555556b850 SExpr {
			type: CONS
			forward_ptr: (nil)
			car: 0x55555556b870 SExpr {
				type: SYMBOL
				forward_ptr: (nil)
				symbol: quote
			}
			cdr: 0x55555556b890 SExpr {
				type: CONS
				forward_ptr: (nil)
				car: 0x55555556b8b0 SExpr {
					type: CONS
					forward_ptr: (nil)
					car: 0x55555556b8d0 SExpr {
						type: NUMBER
						forward_ptr: (nil)
						number: 2.000000
					}
					cdr: 0x55555556b8e8 SExpr {
						type: CONS
						forward_ptr: (nil)
						car: 0x55555556b908 SExpr {
							type: NUMBER
							forward_ptr: (nil)
							number: 1.000000
						}
						cdr: (nil) NIL
					}
				}
				cdr: (nil) NIL
			}
		}
		cdr: (nil) NIL
	}
}
illegal function call `(list3 smaller p larger)`
stack backtrace:
    0: partition
    0: cond
    0: partition
    0: partition
    0: QSORT
    0: QSORT
    0: cond
    0: quicksort
    0: quicksort
    0: <script>
❌: s
(define caar (L) (car (car L))): 
(define caar (L) (car (car L))): ()
(define cadr (L) (car (cdr L))): 
(define cadr (L) (car (cdr L))): ()
(define cddr (L) (cdr (cdr L))): 
(define cddr (L) (cdr (cdr L))): ()
(define caddr (L) (car (cddr L))): 
(define caddr (L) (car (cddr L))): ()
(define cdddr (L) (cdr (cddr L))): 
(define cdddr (L) (cdr (cddr L))): ()
(define list3 (a b c) (cons a (cons b (cons c ())))): 
(define list3 (a b c) (cons a (cons b (cons c ())))): ()
(define insertionsort (L) (INSERTSORT L ())): 
(define insertionsort (L) (INSERTSORT L ())): ()
(define INSERTSORT (unsorted sorted) (cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted))))): 
(define INSERTSORT (unsorted sorted) (cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted))))): ()
(define insert (x L) (cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle))): 
(define insert (x L) (cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle))): ()
(define quicksort (L) (cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ()))))): 
(define quicksort (L) (cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ()))))): ()
(define partition (p L smaller larger) (cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger))))): 
(define partition (p L smaller larger) (cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger))))): ()
(define QSORT (P) (QKSORT (car P) (cadr P) (caddr P))): 
(define QSORT (P) (QKSORT (car P) (cadr P) (caddr P))): ()
(define QKSORT (left p right) (append (quicksort left) (cons p (quicksort right)))): 
(define QKSORT (left p right) (append (quicksort left) (cons p (quicksort right)))): ()
(define append (L M) (cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M))))): 
(define append (L M) (cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M))))): ()
(define mergesort (L) (cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (mergelevel (makelists L))))): 
(define mergesort (L) (cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (mergelevel (makelists L))))): ()
(define makelists (L) (cond ((nil? L) ()) ((quote t) (cons (cons (car L) ()) (makelists (cdr L)))))): 
(define makelists (L) (cond ((nil? L) ()) ((quote t) (cons (cons (car L) ()) (makelists (cdr L)))))): ()
(define mergelevel (LL) (cond ((nil? LL) ()) ((nil? (cdr LL)) (car LL)) ((quote t) (mergelevel (mergepairs LL))))): 
(define mergelevel (LL) (cond ((nil? LL) ()) ((nil? (cdr LL)) (car LL)) ((quote t) (mergelevel (mergepairs LL))))): ()
(define mergepairs (LL) (cond ((nil? LL) ()) ((nil? (cdr LL)) LL) ((quote t) (cons (merge (car LL) (cadr LL)) (mergepairs (cddr LL)))))): 
(define mergepairs (LL) (cond ((nil? LL) ()) ((nil? (cdr LL)) LL) ((quote t) (cons (merge (car LL) (cadr LL)) (mergepairs (cddr LL)))))): ()
(define merge (L M) (cond ((nil? L) M) ((nil? M) L) ((lte (car L) (car M)) (cons (car L) (merge (cdr L) M))) ((quote t) (cons (car M) (merge L (cdr M)))))): 
(define merge (L M) (cond ((nil? L) M) ((nil? M) L) ((lte (car L) (car M)) (cons (car L) (merge (cdr L) M))) ((quote t) (cons (car M) (merge L (cdr M)))))): ()
(quote insertionsort): 
(quote insertionsort): insertionsort
(insertionsort ()): 
	(): 
	(): ()
	(INSERTSORT L ()): 
		L: 
		L: ()
		(): 
		(): ()
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
			(nil? unsorted): 
				unsorted: 
				unsorted: ()
			(nil? unsorted): t
			sorted: 
			sorted: ()
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): ()
	(INSERTSORT L ()): ()
(insertionsort ()): ()
(insertionsort (quote (1.000000))): 
	(quote (1.000000)): 
	(quote (1.000000)): (1.000000)
	(INSERTSORT L ()): 
		L: 
		L: (1.000000)
		(): 
		(): ()
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
			(nil? unsorted): 
				unsorted: 
				unsorted: (1.000000)
			(nil? unsorted): ()
			(quote t): 
			(quote t): t
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
				(cdr unsorted): 
					unsorted: 
					unsorted: (1.000000)
				(cdr unsorted): ()
				(insert (car unsorted) sorted): 
					(car unsorted): 
						unsorted: 
						unsorted: (1.000000)
					(car unsorted): 1.000000
					sorted: 
					sorted: ()
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
						(nil? L): 
							L: 
							L: ()
						(nil? L): t
						(cons x ()): 
							x: 
							x: 1.000000
							(): 
							(): ()
						(cons x ()): (1.000000)
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000)
				(insert (car unsorted) sorted): (1.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
					(nil? unsorted): 
						unsorted: 
						unsorted: ()
					(nil? unsorted): t
					sorted: 
					sorted: (1.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000)
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000)
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000)
	(INSERTSORT L ()): (1.000000)
(insertionsort (quote (1.000000))): (1.000000)
(insertionsort (quote (2.000000 1.000000))): 
	(quote (2.000000 1.000000)): 
	(quote (2.000000 1.000000)): (2.000000 1.000000)
	(INSERTSORT L ()): 
		L: 
		L: (2.000000 1.000000)
		(): 
		(): ()
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
			(nil? unsorted): 
				unsorted: 
				unsorted: (2.000000 1.000000)
			(nil? unsorted): ()
			(quote t): 
			(quote t): t
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
				(cdr unsorted): 
					unsorted: 
					unsorted: (2.000000 1.000000)
				(cdr unsorted): (1.000000)
				(insert (car unsorted) sorted): 
					(car unsorted): 
						unsorted: 
						unsorted: (2.000000 1.000000)
					(car unsorted): 2.000000
					sorted: 
					sorted: ()
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
						(nil? L): 
							L: 
							L: ()
						(nil? L): t
						(cons x ()): 
							x: 
							x: 2.000000
							(): 
							(): ()
						(cons x ()): (2.000000)
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000)
				(insert (car unsorted) sorted): (2.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
					(nil? unsorted): 
						unsorted: 
						unsorted: (1.000000)
					(nil? unsorted): ()
					(quote t): 
					(quote t): t
					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
						(cdr unsorted): 
							unsorted: 
							unsorted: (1.000000)
						(cdr unsorted): ()
						(insert (car unsorted) sorted): 
							(car unsorted): 
								unsorted: 
								unsorted: (1.000000)
							(car unsorted): 1.000000
							sorted: 
							sorted: (2.000000)
							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
								(nil? L): 
									L: 
									L: (2.000000)
								(nil? L): ()
								(lte x (car L)): 
									x: 
									x: 1.000000
									(car L): 
										L: 
										L: (2.000000)
									(car L): 2.000000
								(lte x (car L)): t
								(cons x L): 
									x: 
									x: 1.000000
									L: 
									L: (2.000000)
								(cons x L): (1.000000 2.000000)
							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000)
						(insert (car unsorted) sorted): (1.000000 2.000000)
						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
							(nil? unsorted): 
								unsorted: 
								unsorted: ()
							(nil? unsorted): t
							sorted: 
							sorted: (1.000000 2.000000)
						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000)
					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000)
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000)
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000)
	(INSERTSORT L ()): (1.000000 2.000000)
(insertionsort (quote (2.000000 1.000000))): (1.000000 2.000000)
(insertionsort (quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000))): 
	(quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)): 
	(quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)): (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
	(INSERTSORT L ()): 
		L: 
		L: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
		(): 
		(): ()
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
			(nil? unsorted): 
				unsorted: 
				unsorted: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
			(nil? unsorted): ()
			(quote t): 
			(quote t): t
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
				(cdr unsorted): 
					unsorted: 
					unsorted: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
				(cdr unsorted): (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
				(insert (car unsorted) sorted): 
					(car unsorted): 
						unsorted: 
						unsorted: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
					(car unsorted): 3.000000
					sorted: 
					sorted: ()
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
						(nil? L): 
							L: 
							L: ()
						(nil? L): t
						(cons x ()): 
							x: 
							x: 3.000000
							(): 
							(): ()
						(cons x ()): (3.000000)
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000)
				(insert (car unsorted) sorted): (3.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
					(nil? unsorted): 
						unsorted: 
						unsorted: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
					(nil? unsorted): ()
					(quote t): 
					(quote t): t
					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
						(cdr unsorted): 
							unsorted: 
							unsorted: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
						(cdr unsorted): (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
						(insert (car unsorted) sorted): 
							(car unsorted): 
								unsorted: 
								unsorted: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
							(car unsorted): 2.000000
							sorted: 
							sorted: (3.000000)
							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
								(nil? L): 
									L: 
									L: (3.000000)
								(nil? L): ()
								(lte x (car L)): 
									x: 
									x: 2.000000
									(car L): 
										L: 
										L: (3.000000)
									(car L): 3.000000
								(lte x (car L)): t
								(cons x L): 
									x: 
									x: 2.000000
									L: 
									L: (3.000000)
								(cons x L): (2.000000 3.000000)
							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000)
						(insert (car unsorted) sorted): (2.000000 3.000000)
						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
							(nil? unsorted): 
								unsorted: 
								unsorted: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
							(nil? unsorted): ()
							(quote t): 
							(quote t): t
							(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
								(cdr unsorted): 
									unsorted: 
									unsorted: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
								(cdr unsorted): (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
								(insert (car unsorted) sorted): 
									(car unsorted): 
										unsorted: 
										unsorted: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
									(car unsorted): 1.000000
									sorted: 
									sorted: (2.000000 3.000000)
									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
										(nil? L): 
											L: 
											L: (2.000000 3.000000)
										(nil? L): ()
										(lte x (car L)): 
											x: 
											x: 1.000000
											(car L): 
												L: 
												L: (2.000000 3.000000)
											(car L): 2.000000
										(lte x (car L)): t
										(cons x L): 
											x: 
											x: 1.000000
											L: 
											L: (2.000000 3.000000)
										(cons x L): (1.000000 2.000000 3.000000)
									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000)
								(insert (car unsorted) sorted): (1.000000 2.000000 3.000000)
								(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
									(nil? unsorted): 
										unsorted: 
										unsorted: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
									(nil? unsorted): ()
									(quote t): 
									(quote t): t
									(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
										(cdr unsorted): 
											unsorted: 
											unsorted: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
										(cdr unsorted): (5.000000 6.000000 9.000000 8.000000 7.000000)
										(insert (car unsorted) sorted): 
											(car unsorted): 
												unsorted: 
												unsorted: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
											(car unsorted): 4.000000
											sorted: 
											sorted: (1.000000 2.000000 3.000000)
											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
												(nil? L): 
													L: 
													L: (1.000000 2.000000 3.000000)
												(nil? L): ()
												(lte x (car L)): 
													x: 
													x: 4.000000
													(car L): 
														L: 
														L: (1.000000 2.000000 3.000000)
													(car L): 1.000000
												(lte x (car L)): ()
												(quote t): 
												(quote t): t
												(cons (car L) (insert x (cdr L))): 
													(car L): 
														L: 
														L: (1.000000 2.000000 3.000000)
													(car L): 1.000000
													(insert x (cdr L)): 
														x: 
														x: 4.000000
														(cdr L): 
															L: 
															L: (1.000000 2.000000 3.000000)
														(cdr L): (2.000000 3.000000)
														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
															(nil? L): 
																L: 
																L: (2.000000 3.000000)
															(nil? L): ()
															(lte x (car L)): 
																x: 
																x: 4.000000
																(car L): 
																	L: 
																	L: (2.000000 3.000000)
																(car L): 2.000000
															(lte x (car L)): ()
															(quote t): 
															(quote t): t
															(cons (car L) (insert x (cdr L))): 
																(car L): 
																	L: 
																	L: (2.000000 3.000000)
																(car L): 2.000000
																(insert x (cdr L)): 
																	x: 
																	x: 4.000000
																	(cdr L): 
																		L: 
																		L: (2.000000 3.000000)
																	(cdr L): (3.000000)
																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																		(nil? L): 
																			L: 
																			L: (3.000000)
																		(nil? L): ()
																		(lte x (car L)): 
																			x: 
																			x: 4.000000
																			(car L): 
																				L: 
																				L: (3.000000)
																			(car L): 3.000000
																		(lte x (car L)): ()
																		(quote t): 
																		(quote t): t
																		(cons (car L) (insert x (cdr L))): 
																			(car L): 
																				L: 
																				L: (3.000000)
																			(car L): 3.000000
																			(insert x (cdr L)): 
																				x: 
																				x: 4.000000
																				(cdr L): 
																					L: 
																					L: (3.000000)
																				(cdr L): ()
																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																					(nil? L): 
																						L: 
																						L: ()
																					(nil? L): t
																					(cons x ()): 
																						x: 
																						x: 4.000000
																						(): 
																						(): ()
																					(cons x ()): (4.000000)
																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (4.000000)
																			(insert x (cdr L)): (4.000000)
																		(cons (car L) (insert x (cdr L))): (3.000000 4.000000)
																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000 4.000000)
																(insert x (cdr L)): (3.000000 4.000000)
															(cons (car L) (insert x (cdr L))): (2.000000 3.000000 4.000000)
														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000 4.000000)
													(insert x (cdr L)): (2.000000 3.000000 4.000000)
												(cons (car L) (insert x (cdr L))): (1.000000 2.000000 3.000000 4.000000)
											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000 4.000000)
										(insert (car unsorted) sorted): (1.000000 2.000000 3.000000 4.000000)
										(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
											(nil? unsorted): 
												unsorted: 
												unsorted: (5.000000 6.000000 9.000000 8.000000 7.000000)
											(nil? unsorted): ()
											(quote t): 
											(quote t): t
											(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
												(cdr unsorted): 
													unsorted: 
													unsorted: (5.000000 6.000000 9.000000 8.000000 7.000000)
												(cdr unsorted): (6.000000 9.000000 8.000000 7.000000)
												(insert (car unsorted) sorted): 
													(car unsorted): 
														unsorted: 
														unsorted: (5.000000 6.000000 9.000000 8.000000 7.000000)
													(car unsorted): 5.000000
													sorted: 
													sorted: (1.000000 2.000000 3.000000 4.000000)
													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
														(nil? L): 
															L: 
															L: (1.000000 2.000000 3.000000 4.000000)
														(nil? L): ()
														(lte x (car L)): 
															x: 
															x: 5.000000
															(car L): 
																L: 
																L: (1.000000 2.000000 3.000000 4.000000)
															(car L): 1.000000
														(lte x (car L)): ()
														(quote t): 
														(quote t): t
														(cons (car L) (insert x (cdr L))): 
															(car L): 
																L: 
																L: (1.000000 2.000000 3.000000 4.000000)
															(car L): 1.000000
															(insert x (cdr L)): 
																x: 
																x: 5.000000
																(cdr L): 
																	L: 
																	L: (1.000000 2.000000 3.000000 4.000000)
																(cdr L): (2.000000 3.000000 4.000000)
																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																	(nil? L): 
																		L: 
																		L: (2.000000 3.000000 4.000000)
																	(nil? L): ()
																	(lte x (car L)): 
																		x: 
																		x: 5.000000
																		(car L): 
																			L: 
																			L: (2.000000 3.000000 4.000000)
																		(car L): 2.000000
																	(lte x (car L)): ()
																	(quote t): 
																	(quote t): t
																	(cons (car L) (insert x (cdr L))): 
																		(car L): 
																			L: 
																			L: (2.000000 3.000000 4.000000)
																		(car L): 2.000000
																		(insert x (cdr L)): 
																			x: 
																			x: 5.000000
																			(cdr L): 
																				L: 
																				L: (2.000000 3.000000 4.000000)
																			(cdr L): (3.000000 4.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																				(nil? L): 
																					L: 
																					L: (3.000000 4.000000)
																				(nil? L): ()
																				(lte x (car L)): 
																					x: 
																					x: 5.000000
																					(car L): 
																						L: 
																						L: (3.000000 4.000000)
																					(car L): 3.000000
																				(lte x (car L)): ()
																				(quote t): 
																				(quote t): t
																				(cons (car L) (insert x (cdr L))): 
																					(car L): 
																						L: 
																						L: (3.000000 4.000000)
																					(car L): 3.000000
																					(insert x (cdr L)): 
																						x: 
																						x: 5.000000
																						(cdr L): 
																							L: 
																							L: (3.000000 4.000000)
																						(cdr L): (4.000000)
																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																							(nil? L): 
																								L: 
																								L: (4.000000)
																							(nil? L): ()
																							(lte x (car L)): 
																								x: 
																								x: 5.000000
																								(car L): 
																									L: 
																									L: (4.000000)
																								(car L): 4.000000
																							(lte x (car L)): ()
																							(quote t): 
																							(quote t): t
																							(cons (car L) (insert x (cdr L))): 
																								(car L): 
																									L: 
																									L: (4.000000)
																								(car L): 4.000000
																								(insert x (cdr L)): 
																									x: 
																									x: 5.000000
																									(cdr L): 
																										L: 
																										L: (4.000000)
																									(cdr L): ()
																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																										(nil? L): 
																											L: 
																											L: ()
																										(nil? L): t
																										(cons x ()): 
																											x: 
																											x: 5.000000
																											(): 
																											(): ()
																										(cons x ()): (5.000000)
																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (5.000000)
																								(insert x (cdr L)): (5.000000)
																							(cons (car L) (insert x (cdr L))): (4.000000 5.000000)
																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (4.000000 5.000000)
																					(insert x (cdr L)): (4.000000 5.000000)
																				(cons (car L) (insert x (cdr L))): (3.000000 4.000000 5.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000 4.000000 5.000000)
																		(insert x (cdr L)): (3.000000 4.000000 5.000000)
																	(cons (car L) (insert x (cdr L))): (2.000000 3.000000 4.000000 5.000000)
																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000 4.000000 5.000000)
															(insert x (cdr L)): (2.000000 3.000000 4.000000 5.000000)
														(cons (car L) (insert x (cdr L))): (1.000000 2.000000 3.000000 4.000000 5.000000)
													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000 4.000000 5.000000)
												(insert (car unsorted) sorted): (1.000000 2.000000 3.000000 4.000000 5.000000)
												(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
													(nil? unsorted): 
														unsorted: 
														unsorted: (6.000000 9.000000 8.000000 7.000000)
													(nil? unsorted): ()
													(quote t): 
													(quote t): t
													(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
														(cdr unsorted): 
															unsorted: 
															unsorted: (6.000000 9.000000 8.000000 7.000000)
														(cdr unsorted): (9.000000 8.000000 7.000000)
														(insert (car unsorted) sorted): 
															(car unsorted): 
																unsorted: 
																unsorted: (6.000000 9.000000 8.000000 7.000000)
															(car unsorted): 6.000000
															sorted: 
															sorted: (1.000000 2.000000 3.000000 4.000000 5.000000)
															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																(nil? L): 
																	L: 
																	L: (1.000000 2.000000 3.000000 4.000000 5.000000)
																(nil? L): ()
																(lte x (car L)): 
																	x: 
																	x: 6.000000
																	(car L): 
																		L: 
																		L: (1.000000 2.000000 3.000000 4.000000 5.000000)
																	(car L): 1.000000
																(lte x (car L)): ()
																(quote t): 
																(quote t): t
																(cons (car L) (insert x (cdr L))): 
																	(car L): 
																		L: 
																		L: (1.000000 2.000000 3.000000 4.000000 5.000000)
																	(car L): 1.000000
																	(insert x (cdr L)): 
																		x: 
																		x: 6.000000
																		(cdr L): 
																			L: 
																			L: (1.000000 2.000000 3.000000 4.000000 5.000000)
																		(cdr L): (2.000000 3.000000 4.000000 5.000000)
																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																			(nil? L): 
																				L: 
																				L: (2.000000 3.000000 4.000000 5.000000)
																			(nil? L): ()
																			(lte x (car L)): 
																				x: 
																				x: 6.000000
																				(car L): 
																					L: 
																					L: (2.000000 3.000000 4.000000 5.000000)
																				(car L): 2.000000
																			(lte x (car L)): ()
																			(quote t): 
																			(quote t): t
																			(cons (car L) (insert x (cdr L))): 
																				(car L): 
																					L: 
																					L: (2.000000 3.000000 4.000000 5.000000)
																				(car L): 2.000000
																				(insert x (cdr L)): 
																					x: 
																					x: 6.000000
																					(cdr L): 
																						L: 
																						L: (2.000000 3.000000 4.000000 5.000000)
																					(cdr L): (3.000000 4.000000 5.000000)
																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																						(nil? L): 
																							L: 
																							L: (3.000000 4.000000 5.000000)
																						(nil? L): ()
																						(lte x (car L)): 
																							x: 
																							x: 6.000000
																							(car L): 
																								L: 
																								L: (3.000000 4.000000 5.000000)
																							(car L): 3.000000
																						(lte x (car L)): ()
																						(quote t): 
																						(quote t): t
																						(cons (car L) (insert x (cdr L))): 
																							(car L): 
																								L: 
																								L: (3.000000 4.000000 5.000000)
																							(car L): 3.000000
																							(insert x (cdr L)): 
																								x: 
																								x: 6.000000
																								(cdr L): 
																									L: 
																									L: (3.000000 4.000000 5.000000)
																								(cdr L): (4.000000 5.000000)
																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																									(nil? L): 
																										L: 
																										L: (4.000000 5.000000)
																									(nil? L): ()
																									(lte x (car L)): 
																										x: 
																										x: 6.000000
																										(car L): 
																											L: 
																											L: (4.000000 5.000000)
																										(car L): 4.000000
																									(lte x (car L)): ()
																									(quote t): 
																									(quote t): t
																									(cons (car L) (insert x (cdr L))): 
																										(car L): 
																											L: 
																											L: (4.000000 5.000000)
																										(car L): 4.000000
																										(insert x (cdr L)): 
																											x: 
																											x: 6.000000
																											(cdr L): 
																												L: 
																												L: (4.000000 5.000000)
																											(cdr L): (5.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																												(nil? L): 
																													L: 
																													L: (5.000000)
																												(nil? L): ()
																												(lte x (car L)): 
																													x: 
																													x: 6.000000
																													(car L): 
																														L: 
																														L: (5.000000)
																													(car L): 5.000000
																												(lte x (car L)): ()
																												(quote t): 
																												(quote t): t
																												(cons (car L) (insert x (cdr L))): 
																													(car L): 
																														L: 
																														L: (5.000000)
																													(car L): 5.000000
																													(insert x (cdr L)): 
																														x: 
																														x: 6.000000
																														(cdr L): 
																															L: 
																															L: (5.000000)
																														(cdr L): ()
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																															(nil? L): 
																																L: 
																																L: ()
																															(nil? L): t
																															(cons x ()): 
																																x: 
																																x: 6.000000
																																(): 
																																(): ()
																															(cons x ()): (6.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (6.000000)
																													(insert x (cdr L)): (6.000000)
																												(cons (car L) (insert x (cdr L))): (5.000000 6.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (5.000000 6.000000)
																										(insert x (cdr L)): (5.000000 6.000000)
																									(cons (car L) (insert x (cdr L))): (4.000000 5.000000 6.000000)
																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (4.000000 5.000000 6.000000)
																							(insert x (cdr L)): (4.000000 5.000000 6.000000)
																						(cons (car L) (insert x (cdr L))): (3.000000 4.000000 5.000000 6.000000)
																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000 4.000000 5.000000 6.000000)
																				(insert x (cdr L)): (3.000000 4.000000 5.000000 6.000000)
																			(cons (car L) (insert x (cdr L))): (2.000000 3.000000 4.000000 5.000000 6.000000)
																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000 4.000000 5.000000 6.000000)
																	(insert x (cdr L)): (2.000000 3.000000 4.000000 5.000000 6.000000)
																(cons (car L) (insert x (cdr L))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
														(insert (car unsorted) sorted): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
														(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
															(nil? unsorted): 
																unsorted: 
																unsorted: (9.000000 8.000000 7.000000)
															(nil? unsorted): ()
															(quote t): 
															(quote t): t
															(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																(cdr unsorted): 
																	unsorted: 
																	unsorted: (9.000000 8.000000 7.000000)
																(cdr unsorted): (8.000000 7.000000)
																(insert (car unsorted) sorted): 
																	(car unsorted): 
																		unsorted: 
																		unsorted: (9.000000 8.000000 7.000000)
																	(car unsorted): 9.000000
																	sorted: 
																	sorted: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																		(nil? L): 
																			L: 
																			L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
																		(nil? L): ()
																		(lte x (car L)): 
																			x: 
																			x: 9.000000
																			(car L): 
																				L: 
																				L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
																			(car L): 1.000000
																		(lte x (car L)): ()
																		(quote t): 
																		(quote t): t
																		(cons (car L) (insert x (cdr L))): 
																			(car L): 
																				L: 
																				L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
																			(car L): 1.000000
																			(insert x (cdr L)): 
																				x: 
																				x: 9.000000
																				(cdr L): 
																					L: 
																					L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000)
																				(cdr L): (2.000000 3.000000 4.000000 5.000000 6.000000)
																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																					(nil? L): 
																						L: 
																						L: (2.000000 3.000000 4.000000 5.000000 6.000000)
																					(nil? L): ()
																					(lte x (car L)): 
																						x: 
																						x: 9.000000
																						(car L): 
																							L: 
																							L: (2.000000 3.000000 4.000000 5.000000 6.000000)
																						(car L): 2.000000
																					(lte x (car L)): ()
																					(quote t): 
																					(quote t): t
																					(cons (car L) (insert x (cdr L))): 
																						(car L): 
																							L: 
																							L: (2.000000 3.000000 4.000000 5.000000 6.000000)
																						(car L): 2.000000
																						(insert x (cdr L)): 
																							x: 
																							x: 9.000000
																							(cdr L): 
																								L: 
																								L: (2.000000 3.000000 4.000000 5.000000 6.000000)
																							(cdr L): (3.000000 4.000000 5.000000 6.000000)
																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																								(nil? L): 
																									L: 
																									L: (3.000000 4.000000 5.000000 6.000000)
																								(nil? L): ()
																								(lte x (car L)): 
																									x: 
																									x: 9.000000
																									(car L): 
																										L: 
																										L: (3.000000 4.000000 5.000000 6.000000)
																									(car L): 3.000000
																								(lte x (car L)): ()
																								(quote t): 
																								(quote t): t
																								(cons (car L) (insert x (cdr L))): 
																									(car L): 
																										L: 
																										L: (3.000000 4.000000 5.000000 6.000000)
																									(car L): 3.000000
																									(insert x (cdr L)): 
																										x: 
																										x: 9.000000
																										(cdr L): 
																											L: 
																											L: (3.000000 4.000000 5.000000 6.000000)
																										(cdr L): (4.000000 5.000000 6.000000)
																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																											(nil? L): 
																												L: 
																												L: (4.000000 5.000000 6.000000)
																											(nil? L): ()
																											(lte x (car L)): 
																												x: 
																												x: 9.000000
																												(car L): 
																													L: 
																													L: (4.000000 5.000000 6.000000)
																												(car L): 4.000000
																											(lte x (car L)): ()
																											(quote t): 
																											(quote t): t
																											(cons (car L) (insert x (cdr L))): 
																												(car L): 
																													L: 
																													L: (4.000000 5.000000 6.000000)
																												(car L): 4.000000
																												(insert x (cdr L)): 
																													x: 
																													x: 9.000000
																													(cdr L): 
																														L: 
																														L: (4.000000 5.000000 6.000000)
																													(cdr L): (5.000000 6.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																														(nil? L): 
																															L: 
																															L: (5.000000 6.000000)
																														(nil? L): ()
																														(lte x (car L)): 
																															x: 
																															x: 9.000000
																															(car L): 
																																L: 
																																L: (5.000000 6.000000)
																															(car L): 5.000000
																														(lte x (car L)): ()
																														(quote t): 
																														(quote t): t
																														(cons (car L) (insert x (cdr L))): 
																															(car L): 
																																L: 
																																L: (5.000000 6.000000)
																															(car L): 5.000000
																															(insert x (cdr L)): 
																																x: 
																																x: 9.000000
																																(cdr L): 
																																	L: 
																																	L: (5.000000 6.000000)
																																(cdr L): (6.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																	(nil? L): 
																																		L: 
																																		L: (6.000000)
																																	(nil? L): ()
																																	(lte x (car L)): 
																																		x: 
																																		x: 9.000000
																																		(car L): 
																																			L: 
																																			L: (6.000000)
																																		(car L): 6.000000
																																	(lte x (car L)): ()
																																	(quote t): 
																																	(quote t): t
																																	(cons (car L) (insert x (cdr L))): 
																																		(car L): 
																																			L: 
																																			L: (6.000000)
																																		(car L): 6.000000
																																		(insert x (cdr L)): 
																																			x: 
																																			x: 9.000000
																																			(cdr L): 
																																				L: 
																																				L: (6.000000)
																																			(cdr L): ()
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																				(nil? L): 
																																					L: 
																																					L: ()
																																				(nil? L): t
																																				(cons x ()): 
																																					x: 
																																					x: 9.000000
																																					(): 
																																					(): ()
																																				(cons x ()): (9.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (9.000000)
																																		(insert x (cdr L)): (9.000000)
																																	(cons (car L) (insert x (cdr L))): (6.000000 9.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (6.000000 9.000000)
																															(insert x (cdr L)): (6.000000 9.000000)
																														(cons (car L) (insert x (cdr L))): (5.000000 6.000000 9.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (5.000000 6.000000 9.000000)
																												(insert x (cdr L)): (5.000000 6.000000 9.000000)
																											(cons (car L) (insert x (cdr L))): (4.000000 5.000000 6.000000 9.000000)
																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (4.000000 5.000000 6.000000 9.000000)
																									(insert x (cdr L)): (4.000000 5.000000 6.000000 9.000000)
																								(cons (car L) (insert x (cdr L))): (3.000000 4.000000 5.000000 6.000000 9.000000)
																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000 4.000000 5.000000 6.000000 9.000000)
																						(insert x (cdr L)): (3.000000 4.000000 5.000000 6.000000 9.000000)
																					(cons (car L) (insert x (cdr L))): (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																			(insert x (cdr L)): (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																		(cons (car L) (insert x (cdr L))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																(insert (car unsorted) sorted): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																	(nil? unsorted): 
																		unsorted: 
																		unsorted: (8.000000 7.000000)
																	(nil? unsorted): ()
																	(quote t): 
																	(quote t): t
																	(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																		(cdr unsorted): 
																			unsorted: 
																			unsorted: (8.000000 7.000000)
																		(cdr unsorted): (7.000000)
																		(insert (car unsorted) sorted): 
																			(car unsorted): 
																				unsorted: 
																				unsorted: (8.000000 7.000000)
																			(car unsorted): 8.000000
																			sorted: 
																			sorted: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																				(nil? L): 
																					L: 
																					L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																				(nil? L): ()
																				(lte x (car L)): 
																					x: 
																					x: 8.000000
																					(car L): 
																						L: 
																						L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																					(car L): 1.000000
																				(lte x (car L)): ()
																				(quote t): 
																				(quote t): t
																				(cons (car L) (insert x (cdr L))): 
																					(car L): 
																						L: 
																						L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																					(car L): 1.000000
																					(insert x (cdr L)): 
																						x: 
																						x: 8.000000
																						(cdr L): 
																							L: 
																							L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																						(cdr L): (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																							(nil? L): 
																								L: 
																								L: (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																							(nil? L): ()
																							(lte x (car L)): 
																								x: 
																								x: 8.000000
																								(car L): 
																									L: 
																									L: (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																								(car L): 2.000000
																							(lte x (car L)): ()
																							(quote t): 
																							(quote t): t
																							(cons (car L) (insert x (cdr L))): 
																								(car L): 
																									L: 
																									L: (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																								(car L): 2.000000
																								(insert x (cdr L)): 
																									x: 
																									x: 8.000000
																									(cdr L): 
																										L: 
																										L: (2.000000 3.000000 4.000000 5.000000 6.000000 9.000000)
																									(cdr L): (3.000000 4.000000 5.000000 6.000000 9.000000)
																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																										(nil? L): 
																											L: 
																											L: (3.000000 4.000000 5.000000 6.000000 9.000000)
																										(nil? L): ()
																										(lte x (car L)): 
																											x: 
																											x: 8.000000
																											(car L): 
																												L: 
																												L: (3.000000 4.000000 5.000000 6.000000 9.000000)
																											(car L): 3.000000
																										(lte x (car L)): ()
																										(quote t): 
																										(quote t): t
																										(cons (car L) (insert x (cdr L))): 
																											(car L): 
																												L: 
																												L: (3.000000 4.000000 5.000000 6.000000 9.000000)
																											(car L): 3.000000
																											(insert x (cdr L)): 
																												x: 
																												x: 8.000000
																												(cdr L): 
																													L: 
																													L: (3.000000 4.000000 5.000000 6.000000 9.000000)
																												(cdr L): (4.000000 5.000000 6.000000 9.000000)
																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																													(nil? L): 
																														L: 
																														L: (4.000000 5.000000 6.000000 9.000000)
																													(nil? L): ()
																													(lte x (car L)): 
																														x: 
																														x: 8.000000
																														(car L): 
																															L: 
																															L: (4.000000 5.000000 6.000000 9.000000)
																														(car L): 4.000000
																													(lte x (car L)): ()
																													(quote t): 
																													(quote t): t
																													(cons (car L) (insert x (cdr L))): 
																														(car L): 
																															L: 
																															L: (4.000000 5.000000 6.000000 9.000000)
																														(car L): 4.000000
																														(insert x (cdr L)): 
																															x: 
																															x: 8.000000
																															(cdr L): 
																																L: 
																																L: (4.000000 5.000000 6.000000 9.000000)
																															(cdr L): (5.000000 6.000000 9.000000)
																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																(nil? L): 
																																	L: 
																																	L: (5.000000 6.000000 9.000000)
																																(nil? L): ()
																																(lte x (car L)): 
																																	x: 
																																	x: 8.000000
																																	(car L): 
																																		L: 
																																		L: (5.000000 6.000000 9.000000)
																																	(car L): 5.000000
																																(lte x (car L)): ()
																																(quote t): 
																																(quote t): t
																																(cons (car L) (insert x (cdr L))): 
																																	(car L): 
																																		L: 
																																		L: (5.000000 6.000000 9.000000)
																																	(car L): 5.000000
																																	(insert x (cdr L)): 
																																		x: 
																																		x: 8.000000
																																		(cdr L): 
																																			L: 
																																			L: (5.000000 6.000000 9.000000)
																																		(cdr L): (6.000000 9.000000)
																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																			(nil? L): 
																																				L: 
																																				L: (6.000000 9.000000)
																																			(nil? L): ()
																																			(lte x (car L)): 
																																				x: 
																																				x: 8.000000
																																				(car L): 
																																					L: 
																																					L: (6.000000 9.000000)
																																				(car L): 6.000000
																																			(lte x (car L)): ()
																																			(quote t): 
																																			(quote t): t
																																			(cons (car L) (insert x (cdr L))): 
																																				(car L): 
																																					L: 
																																					L: (6.000000 9.000000)
																																				(car L): 6.000000
																																				(insert x (cdr L)): 
																																					x: 
																																					x: 8.000000
																																					(cdr L): 
																																						L: 
																																						L: (6.000000 9.000000)
																																					(cdr L): (9.000000)
																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																						(nil? L): 
																																							L: 
																																							L: (9.000000)
																																						(nil? L): ()
																																						(lte x (car L)): 
																																							x: 
																																							x: 8.000000
																																							(car L): 
																																								L: 
																																								L: (9.000000)
																																							(car L): 9.000000
																																						(lte x (car L)): t
																																						(cons x L): 
																																							x: 
																																							x: 8.000000
																																							L: 
																																							L: (9.000000)
																																						(cons x L): (8.000000 9.000000)
																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (8.000000 9.000000)
																																				(insert x (cdr L)): (8.000000 9.000000)
																																			(cons (car L) (insert x (cdr L))): (6.000000 8.000000 9.000000)
																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (6.000000 8.000000 9.000000)
																																	(insert x (cdr L)): (6.000000 8.000000 9.000000)
																																(cons (car L) (insert x (cdr L))): (5.000000 6.000000 8.000000 9.000000)
																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (5.000000 6.000000 8.000000 9.000000)
																														(insert x (cdr L)): (5.000000 6.000000 8.000000 9.000000)
																													(cons (car L) (insert x (cdr L))): (4.000000 5.000000 6.000000 8.000000 9.000000)
																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (4.000000 5.000000 6.000000 8.000000 9.000000)
																											(insert x (cdr L)): (4.000000 5.000000 6.000000 8.000000 9.000000)
																										(cons (car L) (insert x (cdr L))): (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																								(insert x (cdr L)): (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																							(cons (car L) (insert x (cdr L))): (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																					(insert x (cdr L)): (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																				(cons (car L) (insert x (cdr L))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																		(insert (car unsorted) sorted): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																			(nil? unsorted): 
																				unsorted: 
																				unsorted: (7.000000)
																			(nil? unsorted): ()
																			(quote t): 
																			(quote t): t
																			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																				(cdr unsorted): 
																					unsorted: 
																					unsorted: (7.000000)
																				(cdr unsorted): ()
																				(insert (car unsorted) sorted): 
																					(car unsorted): 
																						unsorted: 
																						unsorted: (7.000000)
																					(car unsorted): 7.000000
																					sorted: 
																					sorted: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																						(nil? L): 
																							L: 
																							L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																						(nil? L): ()
																						(lte x (car L)): 
																							x: 
																							x: 7.000000
																							(car L): 
																								L: 
																								L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																							(car L): 1.000000
																						(lte x (car L)): ()
																						(quote t): 
																						(quote t): t
																						(cons (car L) (insert x (cdr L))): 
																							(car L): 
																								L: 
																								L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																							(car L): 1.000000
																							(insert x (cdr L)): 
																								x: 
																								x: 7.000000
																								(cdr L): 
																									L: 
																									L: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																								(cdr L): (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																									(nil? L): 
																										L: 
																										L: (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																									(nil? L): ()
																									(lte x (car L)): 
																										x: 
																										x: 7.000000
																										(car L): 
																											L: 
																											L: (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																										(car L): 2.000000
																									(lte x (car L)): ()
																									(quote t): 
																									(quote t): t
																									(cons (car L) (insert x (cdr L))): 
																										(car L): 
																											L: 
																											L: (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																										(car L): 2.000000
																										(insert x (cdr L)): 
																											x: 
																											x: 7.000000
																											(cdr L): 
																												L: 
																												L: (2.000000 3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																											(cdr L): (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																												(nil? L): 
																													L: 
																													L: (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																												(nil? L): ()
																												(lte x (car L)): 
																													x: 
																													x: 7.000000
																													(car L): 
																														L: 
																														L: (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																													(car L): 3.000000
																												(lte x (car L)): ()
																												(quote t): 
																												(quote t): t
																												(cons (car L) (insert x (cdr L))): 
																													(car L): 
																														L: 
																														L: (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																													(car L): 3.000000
																													(insert x (cdr L)): 
																														x: 
																														x: 7.000000
																														(cdr L): 
																															L: 
																															L: (3.000000 4.000000 5.000000 6.000000 8.000000 9.000000)
																														(cdr L): (4.000000 5.000000 6.000000 8.000000 9.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																															(nil? L): 
																																L: 
																																L: (4.000000 5.000000 6.000000 8.000000 9.000000)
																															(nil? L): ()
																															(lte x (car L)): 
																																x: 
																																x: 7.000000
																																(car L): 
																																	L: 
																																	L: (4.000000 5.000000 6.000000 8.000000 9.000000)
																																(car L): 4.000000
																															(lte x (car L)): ()
																															(quote t): 
																															(quote t): t
																															(cons (car L) (insert x (cdr L))): 
																																(car L): 
																																	L: 
																																	L: (4.000000 5.000000 6.000000 8.000000 9.000000)
																																(car L): 4.000000
																																(insert x (cdr L)): 
																																	x: 
																																	x: 7.000000
																																	(cdr L): 
																																		L: 
																																		L: (4.000000 5.000000 6.000000 8.000000 9.000000)
																																	(cdr L): (5.000000 6.000000 8.000000 9.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																		(nil? L): 
																																			L: 
																																			L: (5.000000 6.000000 8.000000 9.000000)
																																		(nil? L): ()
																																		(lte x (car L)): 
																																			x: 
																																			x: 7.000000
																																			(car L): 
																																				L: 
																																				L: (5.000000 6.000000 8.000000 9.000000)
																																			(car L): 5.000000
																																		(lte x (car L)): ()
																																		(quote t): 
																																		(quote t): t
																																		(cons (car L) (insert x (cdr L))): 
																																			(car L): 
																																				L: 
																																				L: (5.000000 6.000000 8.000000 9.000000)
																																			(car L): 5.000000
																																			(insert x (cdr L)): 
																																				x: 
																																				x: 7.000000
																																				(cdr L): 
																																					L: 
																																					L: (5.000000 6.000000 8.000000 9.000000)
																																				(cdr L): (6.000000 8.000000 9.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																					(nil? L): 
																																						L: 
																																						L: (6.000000 8.000000 9.000000)
																																					(nil? L): ()
																																					(lte x (car L)): 
																																						x: 
																																						x: 7.000000
																																						(car L): 
																																							L: 
																																							L: (6.000000 8.000000 9.000000)
																																						(car L): 6.000000
																																					(lte x (car L)): ()
																																					(quote t): 
																																					(quote t): t
																																					(cons (car L) (insert x (cdr L))): 
																																						(car L): 
																																							L: 
																																							L: (6.000000 8.000000 9.000000)
																																						(car L): 6.000000
																																						(insert x (cdr L)): 
																																							x: 
																																							x: 7.000000
																																							(cdr L): 
																																								L: 
																																								L: (6.000000 8.000000 9.000000)
																																							(cdr L): (8.000000 9.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																								(nil? L): 
																																									L: 
																																									L: (8.000000 9.000000)
																																								(nil? L): ()
																																								(lte x (car L)): 
																																									x: 
																																									x: 7.000000
																																									(car L): 
																																										L: 
																																										L: (8.000000 9.000000)
																																									(car L): 8.000000
																																								(lte x (car L)): t
																																								(cons x L): 
																																									x: 
																																									x: 7.000000
																																									L: 
																																									L: (8.000000 9.000000)
																																								(cons x L): (7.000000 8.000000 9.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (7.000000 8.000000 9.000000)
																																						(insert x (cdr L)): (7.000000 8.000000 9.000000)
																																					(cons (car L) (insert x (cdr L))): (6.000000 7.000000 8.000000 9.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (6.000000 7.000000 8.000000 9.000000)
																																			(insert x (cdr L)): (6.000000 7.000000 8.000000 9.000000)
																																		(cons (car L) (insert x (cdr L))): (5.000000 6.000000 7.000000 8.000000 9.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (5.000000 6.000000 7.000000 8.000000 9.000000)
																																(insert x (cdr L)): (5.000000 6.000000 7.000000 8.000000 9.000000)
																															(cons (car L) (insert x (cdr L))): (4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																													(insert x (cdr L)): (4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																												(cons (car L) (insert x (cdr L))): (3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																										(insert x (cdr L)): (3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																									(cons (car L) (insert x (cdr L))): (2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																							(insert x (cdr L)): (2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																						(cons (car L) (insert x (cdr L))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																				(insert (car unsorted) sorted): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																					(nil? unsorted): 
																						unsorted: 
																						unsorted: ()
																					(nil? unsorted): t
																					sorted: 
																					sorted: (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																	(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
																(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
															(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
														(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
													(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
												(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
											(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
										(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
									(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
								(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
							(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
	(INSERTSORT L ()): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
(insertionsort (quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000))): (1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000)
(insertionsort (quote (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000))): 
	(quote (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)): 
	(quote (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)): (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
	(INSERTSORT L ()): 
		L: 
		L: (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
		(): 
		(): ()
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
			(nil? unsorted): 
				unsorted: 
				unsorted: (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
			(nil? unsorted): ()
			(quote t): 
			(quote t): t
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
				(cdr unsorted): 
					unsorted: 
					unsorted: (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
				(cdr unsorted): (72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
				(insert (car unsorted) sorted): 
					(car unsorted): 
						unsorted: 
						unsorted: (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
					(car unsorted): 38.000000
					sorted: 
					sorted: ()
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
						(nil? L): 
							L: 
							L: ()
						(nil? L): t
						(cons x ()): 
							x: 
							x: 38.000000
							(): 
							(): ()
						(cons x ()): (38.000000)
					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000)
				(insert (car unsorted) sorted): (38.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
					(nil? unsorted): 
						unsorted: 
						unsorted: (72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
					(nil? unsorted): ()
					(quote t): 
					(quote t): t
					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
						(cdr unsorted): 
							unsorted: 
							unsorted: (72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
						(cdr unsorted): (61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
						(insert (car unsorted) sorted): 
							(car unsorted): 
								unsorted: 
								unsorted: (72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
							(car unsorted): 72.000000
							sorted: 
							sorted: (38.000000)
							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
								(nil? L): 
									L: 
									L: (38.000000)
								(nil? L): ()
								(lte x (car L)): 
									x: 
									x: 72.000000
									(car L): 
										L: 
										L: (38.000000)
									(car L): 38.000000
								(lte x (car L)): ()
								(quote t): 
								(quote t): t
								(cons (car L) (insert x (cdr L))): 
									(car L): 
										L: 
										L: (38.000000)
									(car L): 38.000000
									(insert x (cdr L)): 
										x: 
										x: 72.000000
										(cdr L): 
											L: 
											L: (38.000000)
										(cdr L): ()
										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
											(nil? L): 
												L: 
												L: ()
											(nil? L): t
											(cons x ()): 
												x: 
												x: 72.000000
												(): 
												(): ()
											(cons x ()): (72.000000)
										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (72.000000)
									(insert x (cdr L)): (72.000000)
								(cons (car L) (insert x (cdr L))): (38.000000 72.000000)
							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 72.000000)
						(insert (car unsorted) sorted): (38.000000 72.000000)
						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
							(nil? unsorted): 
								unsorted: 
								unsorted: (61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
							(nil? unsorted): ()
							(quote t): 
							(quote t): t
							(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
								(cdr unsorted): 
									unsorted: 
									unsorted: (61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
								(cdr unsorted): (45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
								(insert (car unsorted) sorted): 
									(car unsorted): 
										unsorted: 
										unsorted: (61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
									(car unsorted): 61.000000
									sorted: 
									sorted: (38.000000 72.000000)
									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
										(nil? L): 
											L: 
											L: (38.000000 72.000000)
										(nil? L): ()
										(lte x (car L)): 
											x: 
											x: 61.000000
											(car L): 
												L: 
												L: (38.000000 72.000000)
											(car L): 38.000000
										(lte x (car L)): ()
										(quote t): 
										(quote t): t
										(cons (car L) (insert x (cdr L))): 
											(car L): 
												L: 
												L: (38.000000 72.000000)
											(car L): 38.000000
											(insert x (cdr L)): 
												x: 
												x: 61.000000
												(cdr L): 
													L: 
													L: (38.000000 72.000000)
												(cdr L): (72.000000)
												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
													(nil? L): 
														L: 
														L: (72.000000)
													(nil? L): ()
													(lte x (car L)): 
														x: 
														x: 61.000000
														(car L): 
															L: 
															L: (72.000000)
														(car L): 72.000000
													(lte x (car L)): t
													(cons x L): 
														x: 
														x: 61.000000
														L: 
														L: (72.000000)
													(cons x L): (61.000000 72.000000)
												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 72.000000)
											(insert x (cdr L)): (61.000000 72.000000)
										(cons (car L) (insert x (cdr L))): (38.000000 61.000000 72.000000)
									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 61.000000 72.000000)
								(insert (car unsorted) sorted): (38.000000 61.000000 72.000000)
								(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
									(nil? unsorted): 
										unsorted: 
										unsorted: (45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
									(nil? unsorted): ()
									(quote t): 
									(quote t): t
									(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
										(cdr unsorted): 
											unsorted: 
											unsorted: (45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
										(cdr unsorted): (54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
										(insert (car unsorted) sorted): 
											(car unsorted): 
												unsorted: 
												unsorted: (45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
											(car unsorted): 45.000000
											sorted: 
											sorted: (38.000000 61.000000 72.000000)
											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
												(nil? L): 
													L: 
													L: (38.000000 61.000000 72.000000)
												(nil? L): ()
												(lte x (car L)): 
													x: 
													x: 45.000000
													(car L): 
														L: 
														L: (38.000000 61.000000 72.000000)
													(car L): 38.000000
												(lte x (car L)): ()
												(quote t): 
												(quote t): t
												(cons (car L) (insert x (cdr L))): 
													(car L): 
														L: 
														L: (38.000000 61.000000 72.000000)
													(car L): 38.000000
													(insert x (cdr L)): 
														x: 
														x: 45.000000
														(cdr L): 
															L: 
															L: (38.000000 61.000000 72.000000)
														(cdr L): (61.000000 72.000000)
														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
															(nil? L): 
																L: 
																L: (61.000000 72.000000)
															(nil? L): ()
															(lte x (car L)): 
																x: 
																x: 45.000000
																(car L): 
																	L: 
																	L: (61.000000 72.000000)
																(car L): 61.000000
															(lte x (car L)): t
															(cons x L): 
																x: 
																x: 45.000000
																L: 
																L: (61.000000 72.000000)
															(cons x L): (45.000000 61.000000 72.000000)
														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 61.000000 72.000000)
													(insert x (cdr L)): (45.000000 61.000000 72.000000)
												(cons (car L) (insert x (cdr L))): (38.000000 45.000000 61.000000 72.000000)
											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 61.000000 72.000000)
										(insert (car unsorted) sorted): (38.000000 45.000000 61.000000 72.000000)
										(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
											(nil? unsorted): 
												unsorted: 
												unsorted: (54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
											(nil? unsorted): ()
											(quote t): 
											(quote t): t
											(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
												(cdr unsorted): 
													unsorted: 
													unsorted: (54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
												(cdr unsorted): (36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
												(insert (car unsorted) sorted): 
													(car unsorted): 
														unsorted: 
														unsorted: (54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
													(car unsorted): 54.000000
													sorted: 
													sorted: (38.000000 45.000000 61.000000 72.000000)
													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
														(nil? L): 
															L: 
															L: (38.000000 45.000000 61.000000 72.000000)
														(nil? L): ()
														(lte x (car L)): 
															x: 
															x: 54.000000
															(car L): 
																L: 
																L: (38.000000 45.000000 61.000000 72.000000)
															(car L): 38.000000
														(lte x (car L)): ()
														(quote t): 
														(quote t): t
														(cons (car L) (insert x (cdr L))): 
															(car L): 
																L: 
																L: (38.000000 45.000000 61.000000 72.000000)
															(car L): 38.000000
															(insert x (cdr L)): 
																x: 
																x: 54.000000
																(cdr L): 
																	L: 
																	L: (38.000000 45.000000 61.000000 72.000000)
																(cdr L): (45.000000 61.000000 72.000000)
																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																	(nil? L): 
																		L: 
																		L: (45.000000 61.000000 72.000000)
																	(nil? L): ()
																	(lte x (car L)): 
																		x: 
																		x: 54.000000
																		(car L): 
																			L: 
																			L: (45.000000 61.000000 72.000000)
																		(car L): 45.000000
																	(lte x (car L)): ()
																	(quote t): 
																	(quote t): t
																	(cons (car L) (insert x (cdr L))): 
																		(car L): 
																			L: 
																			L: (45.000000 61.000000 72.000000)
																		(car L): 45.000000
																		(insert x (cdr L)): 
																			x: 
																			x: 54.000000
																			(cdr L): 
																				L: 
																				L: (45.000000 61.000000 72.000000)
																			(cdr L): (61.000000 72.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																				(nil? L): 
																					L: 
																					L: (61.000000 72.000000)
																				(nil? L): ()
																				(lte x (car L)): 
																					x: 
																					x: 54.000000
																					(car L): 
																						L: 
																						L: (61.000000 72.000000)
																					(car L): 61.000000
																				(lte x (car L)): t
																				(cons x L): 
																					x: 
																					x: 54.000000
																					L: 
																					L: (61.000000 72.000000)
																				(cons x L): (54.000000 61.000000 72.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 61.000000 72.000000)
																		(insert x (cdr L)): (54.000000 61.000000 72.000000)
																	(cons (car L) (insert x (cdr L))): (45.000000 54.000000 61.000000 72.000000)
																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 54.000000 61.000000 72.000000)
															(insert x (cdr L)): (45.000000 54.000000 61.000000 72.000000)
														(cons (car L) (insert x (cdr L))): (38.000000 45.000000 54.000000 61.000000 72.000000)
													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 54.000000 61.000000 72.000000)
												(insert (car unsorted) sorted): (38.000000 45.000000 54.000000 61.000000 72.000000)
												(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
													(nil? unsorted): 
														unsorted: 
														unsorted: (36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
													(nil? unsorted): ()
													(quote t): 
													(quote t): t
													(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
														(cdr unsorted): 
															unsorted: 
															unsorted: (36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
														(cdr unsorted): (92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
														(insert (car unsorted) sorted): 
															(car unsorted): 
																unsorted: 
																unsorted: (36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
															(car unsorted): 36.000000
															sorted: 
															sorted: (38.000000 45.000000 54.000000 61.000000 72.000000)
															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																(nil? L): 
																	L: 
																	L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																(nil? L): ()
																(lte x (car L)): 
																	x: 
																	x: 36.000000
																	(car L): 
																		L: 
																		L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																	(car L): 38.000000
																(lte x (car L)): t
																(cons x L): 
																	x: 
																	x: 36.000000
																	L: 
																	L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																(cons x L): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
														(insert (car unsorted) sorted): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
														(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
															(nil? unsorted): 
																unsorted: 
																unsorted: (92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
															(nil? unsorted): ()
															(quote t): 
															(quote t): t
															(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																(cdr unsorted): 
																	unsorted: 
																	unsorted: (92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																(cdr unsorted): (18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																(insert (car unsorted) sorted): 
																	(car unsorted): 
																		unsorted: 
																		unsorted: (92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																	(car unsorted): 92.000000
																	sorted: 
																	sorted: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																		(nil? L): 
																			L: 
																			L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
																		(nil? L): ()
																		(lte x (car L)): 
																			x: 
																			x: 92.000000
																			(car L): 
																				L: 
																				L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
																			(car L): 36.000000
																		(lte x (car L)): ()
																		(quote t): 
																		(quote t): t
																		(cons (car L) (insert x (cdr L))): 
																			(car L): 
																				L: 
																				L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
																			(car L): 36.000000
																			(insert x (cdr L)): 
																				x: 
																				x: 92.000000
																				(cdr L): 
																					L: 
																					L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000)
																				(cdr L): (38.000000 45.000000 54.000000 61.000000 72.000000)
																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																					(nil? L): 
																						L: 
																						L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																					(nil? L): ()
																					(lte x (car L)): 
																						x: 
																						x: 92.000000
																						(car L): 
																							L: 
																							L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																						(car L): 38.000000
																					(lte x (car L)): ()
																					(quote t): 
																					(quote t): t
																					(cons (car L) (insert x (cdr L))): 
																						(car L): 
																							L: 
																							L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																						(car L): 38.000000
																						(insert x (cdr L)): 
																							x: 
																							x: 92.000000
																							(cdr L): 
																								L: 
																								L: (38.000000 45.000000 54.000000 61.000000 72.000000)
																							(cdr L): (45.000000 54.000000 61.000000 72.000000)
																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																								(nil? L): 
																									L: 
																									L: (45.000000 54.000000 61.000000 72.000000)
																								(nil? L): ()
																								(lte x (car L)): 
																									x: 
																									x: 92.000000
																									(car L): 
																										L: 
																										L: (45.000000 54.000000 61.000000 72.000000)
																									(car L): 45.000000
																								(lte x (car L)): ()
																								(quote t): 
																								(quote t): t
																								(cons (car L) (insert x (cdr L))): 
																									(car L): 
																										L: 
																										L: (45.000000 54.000000 61.000000 72.000000)
																									(car L): 45.000000
																									(insert x (cdr L)): 
																										x: 
																										x: 92.000000
																										(cdr L): 
																											L: 
																											L: (45.000000 54.000000 61.000000 72.000000)
																										(cdr L): (54.000000 61.000000 72.000000)
																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																											(nil? L): 
																												L: 
																												L: (54.000000 61.000000 72.000000)
																											(nil? L): ()
																											(lte x (car L)): 
																												x: 
																												x: 92.000000
																												(car L): 
																													L: 
																													L: (54.000000 61.000000 72.000000)
																												(car L): 54.000000
																											(lte x (car L)): ()
																											(quote t): 
																											(quote t): t
																											(cons (car L) (insert x (cdr L))): 
																												(car L): 
																													L: 
																													L: (54.000000 61.000000 72.000000)
																												(car L): 54.000000
																												(insert x (cdr L)): 
																													x: 
																													x: 92.000000
																													(cdr L): 
																														L: 
																														L: (54.000000 61.000000 72.000000)
																													(cdr L): (61.000000 72.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																														(nil? L): 
																															L: 
																															L: (61.000000 72.000000)
																														(nil? L): ()
																														(lte x (car L)): 
																															x: 
																															x: 92.000000
																															(car L): 
																																L: 
																																L: (61.000000 72.000000)
																															(car L): 61.000000
																														(lte x (car L)): ()
																														(quote t): 
																														(quote t): t
																														(cons (car L) (insert x (cdr L))): 
																															(car L): 
																																L: 
																																L: (61.000000 72.000000)
																															(car L): 61.000000
																															(insert x (cdr L)): 
																																x: 
																																x: 92.000000
																																(cdr L): 
																																	L: 
																																	L: (61.000000 72.000000)
																																(cdr L): (72.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																	(nil? L): 
																																		L: 
																																		L: (72.000000)
																																	(nil? L): ()
																																	(lte x (car L)): 
																																		x: 
																																		x: 92.000000
																																		(car L): 
																																			L: 
																																			L: (72.000000)
																																		(car L): 72.000000
																																	(lte x (car L)): ()
																																	(quote t): 
																																	(quote t): t
																																	(cons (car L) (insert x (cdr L))): 
																																		(car L): 
																																			L: 
																																			L: (72.000000)
																																		(car L): 72.000000
																																		(insert x (cdr L)): 
																																			x: 
																																			x: 92.000000
																																			(cdr L): 
																																				L: 
																																				L: (72.000000)
																																			(cdr L): ()
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																				(nil? L): 
																																					L: 
																																					L: ()
																																				(nil? L): t
																																				(cons x ()): 
																																					x: 
																																					x: 92.000000
																																					(): 
																																					(): ()
																																				(cons x ()): (92.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (92.000000)
																																		(insert x (cdr L)): (92.000000)
																																	(cons (car L) (insert x (cdr L))): (72.000000 92.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (72.000000 92.000000)
																															(insert x (cdr L)): (72.000000 92.000000)
																														(cons (car L) (insert x (cdr L))): (61.000000 72.000000 92.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 72.000000 92.000000)
																												(insert x (cdr L)): (61.000000 72.000000 92.000000)
																											(cons (car L) (insert x (cdr L))): (54.000000 61.000000 72.000000 92.000000)
																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 61.000000 72.000000 92.000000)
																									(insert x (cdr L)): (54.000000 61.000000 72.000000 92.000000)
																								(cons (car L) (insert x (cdr L))): (45.000000 54.000000 61.000000 72.000000 92.000000)
																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 54.000000 61.000000 72.000000 92.000000)
																						(insert x (cdr L)): (45.000000 54.000000 61.000000 72.000000 92.000000)
																					(cons (car L) (insert x (cdr L))): (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																			(insert x (cdr L)): (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																		(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																(insert (car unsorted) sorted): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																	(nil? unsorted): 
																		unsorted: 
																		unsorted: (18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																	(nil? unsorted): ()
																	(quote t): 
																	(quote t): t
																	(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																		(cdr unsorted): 
																			unsorted: 
																			unsorted: (18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																		(cdr unsorted): (70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																		(insert (car unsorted) sorted): 
																			(car unsorted): 
																				unsorted: 
																				unsorted: (18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																			(car unsorted): 18.000000
																			sorted: 
																			sorted: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																				(nil? L): 
																					L: 
																					L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																				(nil? L): ()
																				(lte x (car L)): 
																					x: 
																					x: 18.000000
																					(car L): 
																						L: 
																						L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																					(car L): 36.000000
																				(lte x (car L)): t
																				(cons x L): 
																					x: 
																					x: 18.000000
																					L: 
																					L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																				(cons x L): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																		(insert (car unsorted) sorted): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																			(nil? unsorted): 
																				unsorted: 
																				unsorted: (70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																			(nil? unsorted): ()
																			(quote t): 
																			(quote t): t
																			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																				(cdr unsorted): 
																					unsorted: 
																					unsorted: (70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																				(cdr unsorted): (93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																				(insert (car unsorted) sorted): 
																					(car unsorted): 
																						unsorted: 
																						unsorted: (70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																					(car unsorted): 70.000000
																					sorted: 
																					sorted: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																						(nil? L): 
																							L: 
																							L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																						(nil? L): ()
																						(lte x (car L)): 
																							x: 
																							x: 70.000000
																							(car L): 
																								L: 
																								L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																							(car L): 18.000000
																						(lte x (car L)): ()
																						(quote t): 
																						(quote t): t
																						(cons (car L) (insert x (cdr L))): 
																							(car L): 
																								L: 
																								L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																							(car L): 18.000000
																							(insert x (cdr L)): 
																								x: 
																								x: 70.000000
																								(cdr L): 
																									L: 
																									L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																								(cdr L): (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																									(nil? L): 
																										L: 
																										L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																									(nil? L): ()
																									(lte x (car L)): 
																										x: 
																										x: 70.000000
																										(car L): 
																											L: 
																											L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																										(car L): 36.000000
																									(lte x (car L)): ()
																									(quote t): 
																									(quote t): t
																									(cons (car L) (insert x (cdr L))): 
																										(car L): 
																											L: 
																											L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																										(car L): 36.000000
																										(insert x (cdr L)): 
																											x: 
																											x: 70.000000
																											(cdr L): 
																												L: 
																												L: (36.000000 38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																											(cdr L): (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																												(nil? L): 
																													L: 
																													L: (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																												(nil? L): ()
																												(lte x (car L)): 
																													x: 
																													x: 70.000000
																													(car L): 
																														L: 
																														L: (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																													(car L): 38.000000
																												(lte x (car L)): ()
																												(quote t): 
																												(quote t): t
																												(cons (car L) (insert x (cdr L))): 
																													(car L): 
																														L: 
																														L: (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																													(car L): 38.000000
																													(insert x (cdr L)): 
																														x: 
																														x: 70.000000
																														(cdr L): 
																															L: 
																															L: (38.000000 45.000000 54.000000 61.000000 72.000000 92.000000)
																														(cdr L): (45.000000 54.000000 61.000000 72.000000 92.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																															(nil? L): 
																																L: 
																																L: (45.000000 54.000000 61.000000 72.000000 92.000000)
																															(nil? L): ()
																															(lte x (car L)): 
																																x: 
																																x: 70.000000
																																(car L): 
																																	L: 
																																	L: (45.000000 54.000000 61.000000 72.000000 92.000000)
																																(car L): 45.000000
																															(lte x (car L)): ()
																															(quote t): 
																															(quote t): t
																															(cons (car L) (insert x (cdr L))): 
																																(car L): 
																																	L: 
																																	L: (45.000000 54.000000 61.000000 72.000000 92.000000)
																																(car L): 45.000000
																																(insert x (cdr L)): 
																																	x: 
																																	x: 70.000000
																																	(cdr L): 
																																		L: 
																																		L: (45.000000 54.000000 61.000000 72.000000 92.000000)
																																	(cdr L): (54.000000 61.000000 72.000000 92.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																		(nil? L): 
																																			L: 
																																			L: (54.000000 61.000000 72.000000 92.000000)
																																		(nil? L): ()
																																		(lte x (car L)): 
																																			x: 
																																			x: 70.000000
																																			(car L): 
																																				L: 
																																				L: (54.000000 61.000000 72.000000 92.000000)
																																			(car L): 54.000000
																																		(lte x (car L)): ()
																																		(quote t): 
																																		(quote t): t
																																		(cons (car L) (insert x (cdr L))): 
																																			(car L): 
																																				L: 
																																				L: (54.000000 61.000000 72.000000 92.000000)
																																			(car L): 54.000000
																																			(insert x (cdr L)): 
																																				x: 
																																				x: 70.000000
																																				(cdr L): 
																																					L: 
																																					L: (54.000000 61.000000 72.000000 92.000000)
																																				(cdr L): (61.000000 72.000000 92.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																					(nil? L): 
																																						L: 
																																						L: (61.000000 72.000000 92.000000)
																																					(nil? L): ()
																																					(lte x (car L)): 
																																						x: 
																																						x: 70.000000
																																						(car L): 
																																							L: 
																																							L: (61.000000 72.000000 92.000000)
																																						(car L): 61.000000
																																					(lte x (car L)): ()
																																					(quote t): 
																																					(quote t): t
																																					(cons (car L) (insert x (cdr L))): 
																																						(car L): 
																																							L: 
																																							L: (61.000000 72.000000 92.000000)
																																						(car L): 61.000000
																																						(insert x (cdr L)): 
																																							x: 
																																							x: 70.000000
																																							(cdr L): 
																																								L: 
																																								L: (61.000000 72.000000 92.000000)
																																							(cdr L): (72.000000 92.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																								(nil? L): 
																																									L: 
																																									L: (72.000000 92.000000)
																																								(nil? L): ()
																																								(lte x (car L)): 
																																									x: 
																																									x: 70.000000
																																									(car L): 
																																										L: 
																																										L: (72.000000 92.000000)
																																									(car L): 72.000000
																																								(lte x (car L)): t
																																								(cons x L): 
																																									x: 
																																									x: 70.000000
																																									L: 
																																									L: (72.000000 92.000000)
																																								(cons x L): (70.000000 72.000000 92.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (70.000000 72.000000 92.000000)
																																						(insert x (cdr L)): (70.000000 72.000000 92.000000)
																																					(cons (car L) (insert x (cdr L))): (61.000000 70.000000 72.000000 92.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 70.000000 72.000000 92.000000)
																																			(insert x (cdr L)): (61.000000 70.000000 72.000000 92.000000)
																																		(cons (car L) (insert x (cdr L))): (54.000000 61.000000 70.000000 72.000000 92.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 61.000000 70.000000 72.000000 92.000000)
																																(insert x (cdr L)): (54.000000 61.000000 70.000000 72.000000 92.000000)
																															(cons (car L) (insert x (cdr L))): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																													(insert x (cdr L)): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																												(cons (car L) (insert x (cdr L))): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																										(insert x (cdr L)): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																									(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																							(insert x (cdr L)): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																						(cons (car L) (insert x (cdr L))): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																				(insert (car unsorted) sorted): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																					(nil? unsorted): 
																						unsorted: 
																						unsorted: (93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																					(nil? unsorted): ()
																					(quote t): 
																					(quote t): t
																					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																						(cdr unsorted): 
																							unsorted: 
																							unsorted: (93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																						(cdr unsorted): (28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																						(insert (car unsorted) sorted): 
																							(car unsorted): 
																								unsorted: 
																								unsorted: (93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																							(car unsorted): 93.000000
																							sorted: 
																							sorted: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																								(nil? L): 
																									L: 
																									L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																								(nil? L): ()
																								(lte x (car L)): 
																									x: 
																									x: 93.000000
																									(car L): 
																										L: 
																										L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																									(car L): 18.000000
																								(lte x (car L)): ()
																								(quote t): 
																								(quote t): t
																								(cons (car L) (insert x (cdr L))): 
																									(car L): 
																										L: 
																										L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																									(car L): 18.000000
																									(insert x (cdr L)): 
																										x: 
																										x: 93.000000
																										(cdr L): 
																											L: 
																											L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																										(cdr L): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																											(nil? L): 
																												L: 
																												L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																											(nil? L): ()
																											(lte x (car L)): 
																												x: 
																												x: 93.000000
																												(car L): 
																													L: 
																													L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																												(car L): 36.000000
																											(lte x (car L)): ()
																											(quote t): 
																											(quote t): t
																											(cons (car L) (insert x (cdr L))): 
																												(car L): 
																													L: 
																													L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																												(car L): 36.000000
																												(insert x (cdr L)): 
																													x: 
																													x: 93.000000
																													(cdr L): 
																														L: 
																														L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																													(cdr L): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																														(nil? L): 
																															L: 
																															L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																														(nil? L): ()
																														(lte x (car L)): 
																															x: 
																															x: 93.000000
																															(car L): 
																																L: 
																																L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																															(car L): 38.000000
																														(lte x (car L)): ()
																														(quote t): 
																														(quote t): t
																														(cons (car L) (insert x (cdr L))): 
																															(car L): 
																																L: 
																																L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																															(car L): 38.000000
																															(insert x (cdr L)): 
																																x: 
																																x: 93.000000
																																(cdr L): 
																																	L: 
																																	L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																																(cdr L): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																	(nil? L): 
																																		L: 
																																		L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																																	(nil? L): ()
																																	(lte x (car L)): 
																																		x: 
																																		x: 93.000000
																																		(car L): 
																																			L: 
																																			L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																																		(car L): 45.000000
																																	(lte x (car L)): ()
																																	(quote t): 
																																	(quote t): t
																																	(cons (car L) (insert x (cdr L))): 
																																		(car L): 
																																			L: 
																																			L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																																		(car L): 45.000000
																																		(insert x (cdr L)): 
																																			x: 
																																			x: 93.000000
																																			(cdr L): 
																																				L: 
																																				L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000)
																																			(cdr L): (54.000000 61.000000 70.000000 72.000000 92.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																				(nil? L): 
																																					L: 
																																					L: (54.000000 61.000000 70.000000 72.000000 92.000000)
																																				(nil? L): ()
																																				(lte x (car L)): 
																																					x: 
																																					x: 93.000000
																																					(car L): 
																																						L: 
																																						L: (54.000000 61.000000 70.000000 72.000000 92.000000)
																																					(car L): 54.000000
																																				(lte x (car L)): ()
																																				(quote t): 
																																				(quote t): t
																																				(cons (car L) (insert x (cdr L))): 
																																					(car L): 
																																						L: 
																																						L: (54.000000 61.000000 70.000000 72.000000 92.000000)
																																					(car L): 54.000000
																																					(insert x (cdr L)): 
																																						x: 
																																						x: 93.000000
																																						(cdr L): 
																																							L: 
																																							L: (54.000000 61.000000 70.000000 72.000000 92.000000)
																																						(cdr L): (61.000000 70.000000 72.000000 92.000000)
																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																							(nil? L): 
																																								L: 
																																								L: (61.000000 70.000000 72.000000 92.000000)
																																							(nil? L): ()
																																							(lte x (car L)): 
																																								x: 
																																								x: 93.000000
																																								(car L): 
																																									L: 
																																									L: (61.000000 70.000000 72.000000 92.000000)
																																								(car L): 61.000000
																																							(lte x (car L)): ()
																																							(quote t): 
																																							(quote t): t
																																							(cons (car L) (insert x (cdr L))): 
																																								(car L): 
																																									L: 
																																									L: (61.000000 70.000000 72.000000 92.000000)
																																								(car L): 61.000000
																																								(insert x (cdr L)): 
																																									x: 
																																									x: 93.000000
																																									(cdr L): 
																																										L: 
																																										L: (61.000000 70.000000 72.000000 92.000000)
																																									(cdr L): (70.000000 72.000000 92.000000)
																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																										(nil? L): 
																																											L: 
																																											L: (70.000000 72.000000 92.000000)
																																										(nil? L): ()
																																										(lte x (car L)): 
																																											x: 
																																											x: 93.000000
																																											(car L): 
																																												L: 
																																												L: (70.000000 72.000000 92.000000)
																																											(car L): 70.000000
																																										(lte x (car L)): ()
																																										(quote t): 
																																										(quote t): t
																																										(cons (car L) (insert x (cdr L))): 
																																											(car L): 
																																												L: 
																																												L: (70.000000 72.000000 92.000000)
																																											(car L): 70.000000
																																											(insert x (cdr L)): 
																																												x: 
																																												x: 93.000000
																																												(cdr L): 
																																													L: 
																																													L: (70.000000 72.000000 92.000000)
																																												(cdr L): (72.000000 92.000000)
																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																													(nil? L): 
																																														L: 
																																														L: (72.000000 92.000000)
																																													(nil? L): ()
																																													(lte x (car L)): 
																																														x: 
																																														x: 93.000000
																																														(car L): 
																																															L: 
																																															L: (72.000000 92.000000)
																																														(car L): 72.000000
																																													(lte x (car L)): ()
																																													(quote t): 
																																													(quote t): t
																																													(cons (car L) (insert x (cdr L))): 
																																														(car L): 
																																															L: 
																																															L: (72.000000 92.000000)
																																														(car L): 72.000000
																																														(insert x (cdr L)): 
																																															x: 
																																															x: 93.000000
																																															(cdr L): 
																																																L: 
																																																L: (72.000000 92.000000)
																																															(cdr L): (92.000000)
																																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																(nil? L): 
																																																	L: 
																																																	L: (92.000000)
																																																(nil? L): ()
																																																(lte x (car L)): 
																																																	x: 
																																																	x: 93.000000
																																																	(car L): 
																																																		L: 
																																																		L: (92.000000)
																																																	(car L): 92.000000
																																																(lte x (car L)): ()
																																																(quote t): 
																																																(quote t): t
																																																(cons (car L) (insert x (cdr L))): 
																																																	(car L): 
																																																		L: 
																																																		L: (92.000000)
																																																	(car L): 92.000000
																																																	(insert x (cdr L)): 
																																																		x: 
																																																		x: 93.000000
																																																		(cdr L): 
																																																			L: 
																																																			L: (92.000000)
																																																		(cdr L): ()
																																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																			(nil? L): 
																																																				L: 
																																																				L: ()
																																																			(nil? L): t
																																																			(cons x ()): 
																																																				x: 
																																																				x: 93.000000
																																																				(): 
																																																				(): ()
																																																			(cons x ()): (93.000000)
																																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (93.000000)
																																																	(insert x (cdr L)): (93.000000)
																																																(cons (car L) (insert x (cdr L))): (92.000000 93.000000)
																																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (92.000000 93.000000)
																																														(insert x (cdr L)): (92.000000 93.000000)
																																													(cons (car L) (insert x (cdr L))): (72.000000 92.000000 93.000000)
																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (72.000000 92.000000 93.000000)
																																											(insert x (cdr L)): (72.000000 92.000000 93.000000)
																																										(cons (car L) (insert x (cdr L))): (70.000000 72.000000 92.000000 93.000000)
																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (70.000000 72.000000 92.000000 93.000000)
																																								(insert x (cdr L)): (70.000000 72.000000 92.000000 93.000000)
																																							(cons (car L) (insert x (cdr L))): (61.000000 70.000000 72.000000 92.000000 93.000000)
																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 70.000000 72.000000 92.000000 93.000000)
																																					(insert x (cdr L)): (61.000000 70.000000 72.000000 92.000000 93.000000)
																																				(cons (car L) (insert x (cdr L))): (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																		(insert x (cdr L)): (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																	(cons (car L) (insert x (cdr L))): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																															(insert x (cdr L)): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																														(cons (car L) (insert x (cdr L))): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																												(insert x (cdr L)): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																											(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																									(insert x (cdr L)): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																								(cons (car L) (insert x (cdr L))): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																						(insert (car unsorted) sorted): (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																							(nil? unsorted): 
																								unsorted: 
																								unsorted: (28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																							(nil? unsorted): ()
																							(quote t): 
																							(quote t): t
																							(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																								(cdr unsorted): 
																									unsorted: 
																									unsorted: (28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																								(cdr unsorted): (71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																								(insert (car unsorted) sorted): 
																									(car unsorted): 
																										unsorted: 
																										unsorted: (28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																									(car unsorted): 28.000000
																									sorted: 
																									sorted: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																										(nil? L): 
																											L: 
																											L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																										(nil? L): ()
																										(lte x (car L)): 
																											x: 
																											x: 28.000000
																											(car L): 
																												L: 
																												L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																											(car L): 18.000000
																										(lte x (car L)): ()
																										(quote t): 
																										(quote t): t
																										(cons (car L) (insert x (cdr L))): 
																											(car L): 
																												L: 
																												L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																											(car L): 18.000000
																											(insert x (cdr L)): 
																												x: 
																												x: 28.000000
																												(cdr L): 
																													L: 
																													L: (18.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																												(cdr L): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																													(nil? L): 
																														L: 
																														L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																													(nil? L): ()
																													(lte x (car L)): 
																														x: 
																														x: 28.000000
																														(car L): 
																															L: 
																															L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																														(car L): 36.000000
																													(lte x (car L)): t
																													(cons x L): 
																														x: 
																														x: 28.000000
																														L: 
																														L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																													(cons x L): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																											(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																										(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																								(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																								(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																									(nil? unsorted): 
																										unsorted: 
																										unsorted: (71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																									(nil? unsorted): ()
																									(quote t): 
																									(quote t): t
																									(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																										(cdr unsorted): 
																											unsorted: 
																											unsorted: (71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																										(cdr unsorted): (46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																										(insert (car unsorted) sorted): 
																											(car unsorted): 
																												unsorted: 
																												unsorted: (71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																											(car unsorted): 71.000000
																											sorted: 
																											sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																												(nil? L): 
																													L: 
																													L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																												(nil? L): ()
																												(lte x (car L)): 
																													x: 
																													x: 71.000000
																													(car L): 
																														L: 
																														L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																													(car L): 18.000000
																												(lte x (car L)): ()
																												(quote t): 
																												(quote t): t
																												(cons (car L) (insert x (cdr L))): 
																													(car L): 
																														L: 
																														L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																													(car L): 18.000000
																													(insert x (cdr L)): 
																														x: 
																														x: 71.000000
																														(cdr L): 
																															L: 
																															L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																														(cdr L): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																															(nil? L): 
																																L: 
																																L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																															(nil? L): ()
																															(lte x (car L)): 
																																x: 
																																x: 71.000000
																																(car L): 
																																	L: 
																																	L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																(car L): 28.000000
																															(lte x (car L)): ()
																															(quote t): 
																															(quote t): t
																															(cons (car L) (insert x (cdr L))): 
																																(car L): 
																																	L: 
																																	L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																(car L): 28.000000
																																(insert x (cdr L)): 
																																	x: 
																																	x: 71.000000
																																	(cdr L): 
																																		L: 
																																		L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																	(cdr L): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																		(nil? L): 
																																			L: 
																																			L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																		(nil? L): ()
																																		(lte x (car L)): 
																																			x: 
																																			x: 71.000000
																																			(car L): 
																																				L: 
																																				L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																			(car L): 36.000000
																																		(lte x (car L)): ()
																																		(quote t): 
																																		(quote t): t
																																		(cons (car L) (insert x (cdr L))): 
																																			(car L): 
																																				L: 
																																				L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																			(car L): 36.000000
																																			(insert x (cdr L)): 
																																				x: 
																																				x: 71.000000
																																				(cdr L): 
																																					L: 
																																					L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																				(cdr L): (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																					(nil? L): 
																																						L: 
																																						L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																					(nil? L): ()
																																					(lte x (car L)): 
																																						x: 
																																						x: 71.000000
																																						(car L): 
																																							L: 
																																							L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																						(car L): 38.000000
																																					(lte x (car L)): ()
																																					(quote t): 
																																					(quote t): t
																																					(cons (car L) (insert x (cdr L))): 
																																						(car L): 
																																							L: 
																																							L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																						(car L): 38.000000
																																						(insert x (cdr L)): 
																																							x: 
																																							x: 71.000000
																																							(cdr L): 
																																								L: 
																																								L: (38.000000 45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																							(cdr L): (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																								(nil? L): 
																																									L: 
																																									L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																								(nil? L): ()
																																								(lte x (car L)): 
																																									x: 
																																									x: 71.000000
																																									(car L): 
																																										L: 
																																										L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																									(car L): 45.000000
																																								(lte x (car L)): ()
																																								(quote t): 
																																								(quote t): t
																																								(cons (car L) (insert x (cdr L))): 
																																									(car L): 
																																										L: 
																																										L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																									(car L): 45.000000
																																									(insert x (cdr L)): 
																																										x: 
																																										x: 71.000000
																																										(cdr L): 
																																											L: 
																																											L: (45.000000 54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																										(cdr L): (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																											(nil? L): 
																																												L: 
																																												L: (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																											(nil? L): ()
																																											(lte x (car L)): 
																																												x: 
																																												x: 71.000000
																																												(car L): 
																																													L: 
																																													L: (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																												(car L): 54.000000
																																											(lte x (car L)): ()
																																											(quote t): 
																																											(quote t): t
																																											(cons (car L) (insert x (cdr L))): 
																																												(car L): 
																																													L: 
																																													L: (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																												(car L): 54.000000
																																												(insert x (cdr L)): 
																																													x: 
																																													x: 71.000000
																																													(cdr L): 
																																														L: 
																																														L: (54.000000 61.000000 70.000000 72.000000 92.000000 93.000000)
																																													(cdr L): (61.000000 70.000000 72.000000 92.000000 93.000000)
																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																														(nil? L): 
																																															L: 
																																															L: (61.000000 70.000000 72.000000 92.000000 93.000000)
																																														(nil? L): ()
																																														(lte x (car L)): 
																																															x: 
																																															x: 71.000000
																																															(car L): 
																																																L: 
																																																L: (61.000000 70.000000 72.000000 92.000000 93.000000)
																																															(car L): 61.000000
																																														(lte x (car L)): ()
																																														(quote t): 
																																														(quote t): t
																																														(cons (car L) (insert x (cdr L))): 
																																															(car L): 
																																																L: 
																																																L: (61.000000 70.000000 72.000000 92.000000 93.000000)
																																															(car L): 61.000000
																																															(insert x (cdr L)): 
																																																x: 
																																																x: 71.000000
																																																(cdr L): 
																																																	L: 
																																																	L: (61.000000 70.000000 72.000000 92.000000 93.000000)
																																																(cdr L): (70.000000 72.000000 92.000000 93.000000)
																																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																	(nil? L): 
																																																		L: 
																																																		L: (70.000000 72.000000 92.000000 93.000000)
																																																	(nil? L): ()
																																																	(lte x (car L)): 
																																																		x: 
																																																		x: 71.000000
																																																		(car L): 
																																																			L: 
																																																			L: (70.000000 72.000000 92.000000 93.000000)
																																																		(car L): 70.000000
																																																	(lte x (car L)): ()
																																																	(quote t): 
																																																	(quote t): t
																																																	(cons (car L) (insert x (cdr L))): 
																																																		(car L): 
																																																			L: 
																																																			L: (70.000000 72.000000 92.000000 93.000000)
																																																		(car L): 70.000000
																																																		(insert x (cdr L)): 
																																																			x: 
																																																			x: 71.000000
																																																			(cdr L): 
																																																				L: 
																																																				L: (70.000000 72.000000 92.000000 93.000000)
																																																			(cdr L): (72.000000 92.000000 93.000000)
																																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																				(nil? L): 
																																																					L: 
																																																					L: (72.000000 92.000000 93.000000)
																																																				(nil? L): ()
																																																				(lte x (car L)): 
																																																					x: 
																																																					x: 71.000000
																																																					(car L): 
																																																						L: 
																																																						L: (72.000000 92.000000 93.000000)
																																																					(car L): 72.000000
																																																				(lte x (car L)): t
																																																				(cons x L): 
																																																					x: 
																																																					x: 71.000000
																																																					L: 
																																																					L: (72.000000 92.000000 93.000000)
																																																				(cons x L): (71.000000 72.000000 92.000000 93.000000)
																																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (71.000000 72.000000 92.000000 93.000000)
																																																		(insert x (cdr L)): (71.000000 72.000000 92.000000 93.000000)
																																																	(cons (car L) (insert x (cdr L))): (70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(insert x (cdr L)): (70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(cons (car L) (insert x (cdr L))): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(insert x (cdr L)): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(cons (car L) (insert x (cdr L))): (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(insert x (cdr L)): (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(cons (car L) (insert x (cdr L))): (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(insert x (cdr L)): (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(cons (car L) (insert x (cdr L))): (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(insert x (cdr L)): (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(insert x (cdr L)): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																															(cons (car L) (insert x (cdr L))): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																													(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																												(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																										(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																										(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																											(nil? unsorted): 
																												unsorted: 
																												unsorted: (46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																											(nil? unsorted): ()
																											(quote t): 
																											(quote t): t
																											(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																												(cdr unsorted): 
																													unsorted: 
																													unsorted: (46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																												(cdr unsorted): (55.000000 46.000000 93.000000 82.000000 17.000000)
																												(insert (car unsorted) sorted): 
																													(car unsorted): 
																														unsorted: 
																														unsorted: (46.000000 55.000000 46.000000 93.000000 82.000000 17.000000)
																													(car unsorted): 46.000000
																													sorted: 
																													sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																														(nil? L): 
																															L: 
																															L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																														(nil? L): ()
																														(lte x (car L)): 
																															x: 
																															x: 46.000000
																															(car L): 
																																L: 
																																L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																															(car L): 18.000000
																														(lte x (car L)): ()
																														(quote t): 
																														(quote t): t
																														(cons (car L) (insert x (cdr L))): 
																															(car L): 
																																L: 
																																L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																															(car L): 18.000000
																															(insert x (cdr L)): 
																																x: 
																																x: 46.000000
																																(cdr L): 
																																	L: 
																																	L: (18.000000 28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(cdr L): (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																	(nil? L): 
																																		L: 
																																		L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(nil? L): ()
																																	(lte x (car L)): 
																																		x: 
																																		x: 46.000000
																																		(car L): 
																																			L: 
																																			L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(car L): 28.000000
																																	(lte x (car L)): ()
																																	(quote t): 
																																	(quote t): t
																																	(cons (car L) (insert x (cdr L))): 
																																		(car L): 
																																			L: 
																																			L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(car L): 28.000000
																																		(insert x (cdr L)): 
																																			x: 
																																			x: 46.000000
																																			(cdr L): 
																																				L: 
																																				L: (28.000000 36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(cdr L): (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																				(nil? L): 
																																					L: 
																																					L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(nil? L): ()
																																				(lte x (car L)): 
																																					x: 
																																					x: 46.000000
																																					(car L): 
																																						L: 
																																						L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(car L): 36.000000
																																				(lte x (car L)): ()
																																				(quote t): 
																																				(quote t): t
																																				(cons (car L) (insert x (cdr L))): 
																																					(car L): 
																																						L: 
																																						L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(car L): 36.000000
																																					(insert x (cdr L)): 
																																						x: 
																																						x: 46.000000
																																						(cdr L): 
																																							L: 
																																							L: (36.000000 38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(cdr L): (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																							(nil? L): 
																																								L: 
																																								L: (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(nil? L): ()
																																							(lte x (car L)): 
																																								x: 
																																								x: 46.000000
																																								(car L): 
																																									L: 
																																									L: (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(car L): 38.000000
																																							(lte x (car L)): ()
																																							(quote t): 
																																							(quote t): t
																																							(cons (car L) (insert x (cdr L))): 
																																								(car L): 
																																									L: 
																																									L: (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(car L): 38.000000
																																								(insert x (cdr L)): 
																																									x: 
																																									x: 46.000000
																																									(cdr L): 
																																										L: 
																																										L: (38.000000 45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(cdr L): (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																										(nil? L): 
																																											L: 
																																											L: (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(nil? L): ()
																																										(lte x (car L)): 
																																											x: 
																																											x: 46.000000
																																											(car L): 
																																												L: 
																																												L: (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(car L): 45.000000
																																										(lte x (car L)): ()
																																										(quote t): 
																																										(quote t): t
																																										(cons (car L) (insert x (cdr L))): 
																																											(car L): 
																																												L: 
																																												L: (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(car L): 45.000000
																																											(insert x (cdr L)): 
																																												x: 
																																												x: 46.000000
																																												(cdr L): 
																																													L: 
																																													L: (45.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(cdr L): (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																													(nil? L): 
																																														L: 
																																														L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(nil? L): ()
																																													(lte x (car L)): 
																																														x: 
																																														x: 46.000000
																																														(car L): 
																																															L: 
																																															L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(car L): 54.000000
																																													(lte x (car L)): t
																																													(cons x L): 
																																														x: 
																																														x: 46.000000
																																														L: 
																																														L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(cons x L): (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(insert x (cdr L)): (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(cons (car L) (insert x (cdr L))): (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(insert x (cdr L)): (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(cons (car L) (insert x (cdr L))): (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(insert x (cdr L)): (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(insert x (cdr L)): (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(cons (car L) (insert x (cdr L))): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																															(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																														(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																												(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																												(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																													(nil? unsorted): 
																														unsorted: 
																														unsorted: (55.000000 46.000000 93.000000 82.000000 17.000000)
																													(nil? unsorted): ()
																													(quote t): 
																													(quote t): t
																													(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																														(cdr unsorted): 
																															unsorted: 
																															unsorted: (55.000000 46.000000 93.000000 82.000000 17.000000)
																														(cdr unsorted): (46.000000 93.000000 82.000000 17.000000)
																														(insert (car unsorted) sorted): 
																															(car unsorted): 
																																unsorted: 
																																unsorted: (55.000000 46.000000 93.000000 82.000000 17.000000)
																															(car unsorted): 55.000000
																															sorted: 
																															sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																(nil? L): 
																																	L: 
																																	L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(nil? L): ()
																																(lte x (car L)): 
																																	x: 
																																	x: 55.000000
																																	(car L): 
																																		L: 
																																		L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(car L): 18.000000
																																(lte x (car L)): ()
																																(quote t): 
																																(quote t): t
																																(cons (car L) (insert x (cdr L))): 
																																	(car L): 
																																		L: 
																																		L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(car L): 18.000000
																																	(insert x (cdr L)): 
																																		x: 
																																		x: 55.000000
																																		(cdr L): 
																																			L: 
																																			L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(cdr L): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																			(nil? L): 
																																				L: 
																																				L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(nil? L): ()
																																			(lte x (car L)): 
																																				x: 
																																				x: 55.000000
																																				(car L): 
																																					L: 
																																					L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(car L): 28.000000
																																			(lte x (car L)): ()
																																			(quote t): 
																																			(quote t): t
																																			(cons (car L) (insert x (cdr L))): 
																																				(car L): 
																																					L: 
																																					L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(car L): 28.000000
																																				(insert x (cdr L)): 
																																					x: 
																																					x: 55.000000
																																					(cdr L): 
																																						L: 
																																						L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(cdr L): (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																						(nil? L): 
																																							L: 
																																							L: (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(nil? L): ()
																																						(lte x (car L)): 
																																							x: 
																																							x: 55.000000
																																							(car L): 
																																								L: 
																																								L: (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(car L): 36.000000
																																						(lte x (car L)): ()
																																						(quote t): 
																																						(quote t): t
																																						(cons (car L) (insert x (cdr L))): 
																																							(car L): 
																																								L: 
																																								L: (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(car L): 36.000000
																																							(insert x (cdr L)): 
																																								x: 
																																								x: 55.000000
																																								(cdr L): 
																																									L: 
																																									L: (36.000000 38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(cdr L): (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																									(nil? L): 
																																										L: 
																																										L: (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(nil? L): ()
																																									(lte x (car L)): 
																																										x: 
																																										x: 55.000000
																																										(car L): 
																																											L: 
																																											L: (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(car L): 38.000000
																																									(lte x (car L)): ()
																																									(quote t): 
																																									(quote t): t
																																									(cons (car L) (insert x (cdr L))): 
																																										(car L): 
																																											L: 
																																											L: (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(car L): 38.000000
																																										(insert x (cdr L)): 
																																											x: 
																																											x: 55.000000
																																											(cdr L): 
																																												L: 
																																												L: (38.000000 45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(cdr L): (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																												(nil? L): 
																																													L: 
																																													L: (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(nil? L): ()
																																												(lte x (car L)): 
																																													x: 
																																													x: 55.000000
																																													(car L): 
																																														L: 
																																														L: (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(car L): 45.000000
																																												(lte x (car L)): ()
																																												(quote t): 
																																												(quote t): t
																																												(cons (car L) (insert x (cdr L))): 
																																													(car L): 
																																														L: 
																																														L: (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(car L): 45.000000
																																													(insert x (cdr L)): 
																																														x: 
																																														x: 55.000000
																																														(cdr L): 
																																															L: 
																																															L: (45.000000 46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(cdr L): (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																															(nil? L): 
																																																L: 
																																																L: (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(nil? L): ()
																																															(lte x (car L)): 
																																																x: 
																																																x: 55.000000
																																																(car L): 
																																																	L: 
																																																	L: (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(car L): 46.000000
																																															(lte x (car L)): ()
																																															(quote t): 
																																															(quote t): t
																																															(cons (car L) (insert x (cdr L))): 
																																																(car L): 
																																																	L: 
																																																	L: (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(car L): 46.000000
																																																(insert x (cdr L)): 
																																																	x: 
																																																	x: 55.000000
																																																	(cdr L): 
																																																		L: 
																																																		L: (46.000000 54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(cdr L): (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																		(nil? L): 
																																																			L: 
																																																			L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																		(nil? L): ()
																																																		(lte x (car L)): 
																																																			x: 
																																																			x: 55.000000
																																																			(car L): 
																																																				L: 
																																																				L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																			(car L): 54.000000
																																																		(lte x (car L)): ()
																																																		(quote t): 
																																																		(quote t): t
																																																		(cons (car L) (insert x (cdr L))): 
																																																			(car L): 
																																																				L: 
																																																				L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																			(car L): 54.000000
																																																			(insert x (cdr L)): 
																																																				x: 
																																																				x: 55.000000
																																																				(cdr L): 
																																																					L: 
																																																					L: (54.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																				(cdr L): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																					(nil? L): 
																																																						L: 
																																																						L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																					(nil? L): ()
																																																					(lte x (car L)): 
																																																						x: 
																																																						x: 55.000000
																																																						(car L): 
																																																							L: 
																																																							L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																						(car L): 61.000000
																																																					(lte x (car L)): t
																																																					(cons x L): 
																																																						x: 
																																																						x: 55.000000
																																																						L: 
																																																						L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																					(cons x L): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																			(insert x (cdr L)): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																		(cons (car L) (insert x (cdr L))): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(insert x (cdr L)): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(cons (car L) (insert x (cdr L))): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(insert x (cdr L)): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(cons (car L) (insert x (cdr L))): (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(insert x (cdr L)): (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(cons (car L) (insert x (cdr L))): (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(insert x (cdr L)): (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(insert x (cdr L)): (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(cons (car L) (insert x (cdr L))): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																														(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																														(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																															(nil? unsorted): 
																																unsorted: 
																																unsorted: (46.000000 93.000000 82.000000 17.000000)
																															(nil? unsorted): ()
																															(quote t): 
																															(quote t): t
																															(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																																(cdr unsorted): 
																																	unsorted: 
																																	unsorted: (46.000000 93.000000 82.000000 17.000000)
																																(cdr unsorted): (93.000000 82.000000 17.000000)
																																(insert (car unsorted) sorted): 
																																	(car unsorted): 
																																		unsorted: 
																																		unsorted: (46.000000 93.000000 82.000000 17.000000)
																																	(car unsorted): 46.000000
																																	sorted: 
																																	sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																		(nil? L): 
																																			L: 
																																			L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(nil? L): ()
																																		(lte x (car L)): 
																																			x: 
																																			x: 46.000000
																																			(car L): 
																																				L: 
																																				L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(car L): 18.000000
																																		(lte x (car L)): ()
																																		(quote t): 
																																		(quote t): t
																																		(cons (car L) (insert x (cdr L))): 
																																			(car L): 
																																				L: 
																																				L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(car L): 18.000000
																																			(insert x (cdr L)): 
																																				x: 
																																				x: 46.000000
																																				(cdr L): 
																																					L: 
																																					L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(cdr L): (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																					(nil? L): 
																																						L: 
																																						L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(nil? L): ()
																																					(lte x (car L)): 
																																						x: 
																																						x: 46.000000
																																						(car L): 
																																							L: 
																																							L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(car L): 28.000000
																																					(lte x (car L)): ()
																																					(quote t): 
																																					(quote t): t
																																					(cons (car L) (insert x (cdr L))): 
																																						(car L): 
																																							L: 
																																							L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(car L): 28.000000
																																						(insert x (cdr L)): 
																																							x: 
																																							x: 46.000000
																																							(cdr L): 
																																								L: 
																																								L: (28.000000 36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(cdr L): (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																								(nil? L): 
																																									L: 
																																									L: (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(nil? L): ()
																																								(lte x (car L)): 
																																									x: 
																																									x: 46.000000
																																									(car L): 
																																										L: 
																																										L: (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(car L): 36.000000
																																								(lte x (car L)): ()
																																								(quote t): 
																																								(quote t): t
																																								(cons (car L) (insert x (cdr L))): 
																																									(car L): 
																																										L: 
																																										L: (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(car L): 36.000000
																																									(insert x (cdr L)): 
																																										x: 
																																										x: 46.000000
																																										(cdr L): 
																																											L: 
																																											L: (36.000000 38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(cdr L): (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																											(nil? L): 
																																												L: 
																																												L: (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(nil? L): ()
																																											(lte x (car L)): 
																																												x: 
																																												x: 46.000000
																																												(car L): 
																																													L: 
																																													L: (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(car L): 38.000000
																																											(lte x (car L)): ()
																																											(quote t): 
																																											(quote t): t
																																											(cons (car L) (insert x (cdr L))): 
																																												(car L): 
																																													L: 
																																													L: (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(car L): 38.000000
																																												(insert x (cdr L)): 
																																													x: 
																																													x: 46.000000
																																													(cdr L): 
																																														L: 
																																														L: (38.000000 45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(cdr L): (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																														(nil? L): 
																																															L: 
																																															L: (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(nil? L): ()
																																														(lte x (car L)): 
																																															x: 
																																															x: 46.000000
																																															(car L): 
																																																L: 
																																																L: (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(car L): 45.000000
																																														(lte x (car L)): ()
																																														(quote t): 
																																														(quote t): t
																																														(cons (car L) (insert x (cdr L))): 
																																															(car L): 
																																																L: 
																																																L: (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(car L): 45.000000
																																															(insert x (cdr L)): 
																																																x: 
																																																x: 46.000000
																																																(cdr L): 
																																																	L: 
																																																	L: (45.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(cdr L): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																	(nil? L): 
																																																		L: 
																																																		L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(nil? L): ()
																																																	(lte x (car L)): 
																																																		x: 
																																																		x: 46.000000
																																																		(car L): 
																																																			L: 
																																																			L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																		(car L): 46.000000
																																																	(lte x (car L)): t
																																																	(cons x L): 
																																																		x: 
																																																		x: 46.000000
																																																		L: 
																																																		L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(cons x L): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(insert x (cdr L)): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(cons (car L) (insert x (cdr L))): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(insert x (cdr L)): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(cons (car L) (insert x (cdr L))): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(insert x (cdr L)): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(insert x (cdr L)): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(cons (car L) (insert x (cdr L))): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																		(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																																	(nil? unsorted): 
																																		unsorted: 
																																		unsorted: (93.000000 82.000000 17.000000)
																																	(nil? unsorted): ()
																																	(quote t): 
																																	(quote t): t
																																	(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																																		(cdr unsorted): 
																																			unsorted: 
																																			unsorted: (93.000000 82.000000 17.000000)
																																		(cdr unsorted): (82.000000 17.000000)
																																		(insert (car unsorted) sorted): 
																																			(car unsorted): 
																																				unsorted: 
																																				unsorted: (93.000000 82.000000 17.000000)
																																			(car unsorted): 93.000000
																																			sorted: 
																																			sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																				(nil? L): 
																																					L: 
																																					L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																				(nil? L): ()
																																				(lte x (car L)): 
																																					x: 
																																					x: 93.000000
																																					(car L): 
																																						L: 
																																						L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(car L): 18.000000
																																				(lte x (car L)): ()
																																				(quote t): 
																																				(quote t): t
																																				(cons (car L) (insert x (cdr L))): 
																																					(car L): 
																																						L: 
																																						L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																					(car L): 18.000000
																																					(insert x (cdr L)): 
																																						x: 
																																						x: 93.000000
																																						(cdr L): 
																																							L: 
																																							L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(cdr L): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																							(nil? L): 
																																								L: 
																																								L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																							(nil? L): ()
																																							(lte x (car L)): 
																																								x: 
																																								x: 93.000000
																																								(car L): 
																																									L: 
																																									L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(car L): 28.000000
																																							(lte x (car L)): ()
																																							(quote t): 
																																							(quote t): t
																																							(cons (car L) (insert x (cdr L))): 
																																								(car L): 
																																									L: 
																																									L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																								(car L): 28.000000
																																								(insert x (cdr L)): 
																																									x: 
																																									x: 93.000000
																																									(cdr L): 
																																										L: 
																																										L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(cdr L): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																										(nil? L): 
																																											L: 
																																											L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																										(nil? L): ()
																																										(lte x (car L)): 
																																											x: 
																																											x: 93.000000
																																											(car L): 
																																												L: 
																																												L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(car L): 36.000000
																																										(lte x (car L)): ()
																																										(quote t): 
																																										(quote t): t
																																										(cons (car L) (insert x (cdr L))): 
																																											(car L): 
																																												L: 
																																												L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																											(car L): 36.000000
																																											(insert x (cdr L)): 
																																												x: 
																																												x: 93.000000
																																												(cdr L): 
																																													L: 
																																													L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(cdr L): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																													(nil? L): 
																																														L: 
																																														L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																													(nil? L): ()
																																													(lte x (car L)): 
																																														x: 
																																														x: 93.000000
																																														(car L): 
																																															L: 
																																															L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(car L): 38.000000
																																													(lte x (car L)): ()
																																													(quote t): 
																																													(quote t): t
																																													(cons (car L) (insert x (cdr L))): 
																																														(car L): 
																																															L: 
																																															L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																														(car L): 38.000000
																																														(insert x (cdr L)): 
																																															x: 
																																															x: 93.000000
																																															(cdr L): 
																																																L: 
																																																L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(cdr L): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																(nil? L): 
																																																	L: 
																																																	L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																(nil? L): ()
																																																(lte x (car L)): 
																																																	x: 
																																																	x: 93.000000
																																																	(car L): 
																																																		L: 
																																																		L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(car L): 45.000000
																																																(lte x (car L)): ()
																																																(quote t): 
																																																(quote t): t
																																																(cons (car L) (insert x (cdr L))): 
																																																	(car L): 
																																																		L: 
																																																		L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																	(car L): 45.000000
																																																	(insert x (cdr L)): 
																																																		x: 
																																																		x: 93.000000
																																																		(cdr L): 
																																																			L: 
																																																			L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																		(cdr L): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																			(nil? L): 
																																																				L: 
																																																				L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																			(nil? L): ()
																																																			(lte x (car L)): 
																																																				x: 
																																																				x: 93.000000
																																																				(car L): 
																																																					L: 
																																																					L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																				(car L): 46.000000
																																																			(lte x (car L)): ()
																																																			(quote t): 
																																																			(quote t): t
																																																			(cons (car L) (insert x (cdr L))): 
																																																				(car L): 
																																																					L: 
																																																					L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																				(car L): 46.000000
																																																				(insert x (cdr L)): 
																																																					x: 
																																																					x: 93.000000
																																																					(cdr L): 
																																																						L: 
																																																						L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																					(cdr L): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																						(nil? L): 
																																																							L: 
																																																							L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																						(nil? L): ()
																																																						(lte x (car L)): 
																																																							x: 
																																																							x: 93.000000
																																																							(car L): 
																																																								L: 
																																																								L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																							(car L): 46.000000
																																																						(lte x (car L)): ()
																																																						(quote t): 
																																																						(quote t): t
																																																						(cons (car L) (insert x (cdr L))): 
																																																							(car L): 
																																																								L: 
																																																								L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																							(car L): 46.000000
																																																							(insert x (cdr L)): 
																																																								x: 
																																																								x: 93.000000
																																																								(cdr L): 
																																																									L: 
																																																									L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																								(cdr L): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																									(nil? L): 
																																																										L: 
																																																										L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																									(nil? L): ()
																																																									(lte x (car L)): 
																																																										x: 
																																																										x: 93.000000
																																																										(car L): 
																																																											L: 
																																																											L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																										(car L): 54.000000
																																																									(lte x (car L)): ()
																																																									(quote t): 
																																																									(quote t): t
																																																									(cons (car L) (insert x (cdr L))): 
																																																										(car L): 
																																																											L: 
																																																											L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																										(car L): 54.000000
																																																										(insert x (cdr L)): 
																																																											x: 
																																																											x: 93.000000
																																																											(cdr L): 
																																																												L: 
																																																												L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																											(cdr L): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																												(nil? L): 
																																																													L: 
																																																													L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																												(nil? L): ()
																																																												(lte x (car L)): 
																																																													x: 
																																																													x: 93.000000
																																																													(car L): 
																																																														L: 
																																																														L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																													(car L): 55.000000
																																																												(lte x (car L)): ()
																																																												(quote t): 
																																																												(quote t): t
																																																												(cons (car L) (insert x (cdr L))): 
																																																													(car L): 
																																																														L: 
																																																														L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																													(car L): 55.000000
																																																													(insert x (cdr L)): 
																																																														x: 
																																																														x: 93.000000
																																																														(cdr L): 
																																																															L: 
																																																															L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																														(cdr L): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																															(nil? L): 
																																																																L: 
																																																																L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																															(nil? L): ()
																																																															(lte x (car L)): 
																																																																x: 
																																																																x: 93.000000
																																																																(car L): 
																																																																	L: 
																																																																	L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																(car L): 61.000000
																																																															(lte x (car L)): ()
																																																															(quote t): 
																																																															(quote t): t
																																																															(cons (car L) (insert x (cdr L))): 
																																																																(car L): 
																																																																	L: 
																																																																	L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																(car L): 61.000000
																																																																(insert x (cdr L)): 
																																																																	x: 
																																																																	x: 93.000000
																																																																	(cdr L): 
																																																																		L: 
																																																																		L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																	(cdr L): (70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																		(nil? L): 
																																																																			L: 
																																																																			L: (70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																		(nil? L): ()
																																																																		(lte x (car L)): 
																																																																			x: 
																																																																			x: 93.000000
																																																																			(car L): 
																																																																				L: 
																																																																				L: (70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																			(car L): 70.000000
																																																																		(lte x (car L)): ()
																																																																		(quote t): 
																																																																		(quote t): t
																																																																		(cons (car L) (insert x (cdr L))): 
																																																																			(car L): 
																																																																				L: 
																																																																				L: (70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																			(car L): 70.000000
																																																																			(insert x (cdr L)): 
																																																																				x: 
																																																																				x: 93.000000
																																																																				(cdr L): 
																																																																					L: 
																																																																					L: (70.000000 71.000000 72.000000 92.000000 93.000000)
																																																																				(cdr L): (71.000000 72.000000 92.000000 93.000000)
																																																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																					(nil? L): 
																																																																						L: 
																																																																						L: (71.000000 72.000000 92.000000 93.000000)
																																																																					(nil? L): ()
																																																																					(lte x (car L)): 
																																																																						x: 
																																																																						x: 93.000000
																																																																						(car L): 
																																																																							L: 
																																																																							L: (71.000000 72.000000 92.000000 93.000000)
																																																																						(car L): 71.000000
																																																																					(lte x (car L)): ()
																																																																					(quote t): 
																																																																					(quote t): t
																																																																					(cons (car L) (insert x (cdr L))): 
																																																																						(car L): 
																																																																							L: 
																																																																							L: (71.000000 72.000000 92.000000 93.000000)
																																																																						(car L): 71.000000
																																																																						(insert x (cdr L)): 
																																																																							x: 
																																																																							x: 93.000000
																																																																							(cdr L): 
																																																																								L: 
																																																																								L: (71.000000 72.000000 92.000000 93.000000)
																																																																							(cdr L): (72.000000 92.000000 93.000000)
																																																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																								(nil? L): 
																																																																									L: 
																																																																									L: (72.000000 92.000000 93.000000)
																																																																								(nil? L): ()
																																																																								(lte x (car L)): 
																																																																									x: 
																																																																									x: 93.000000
																																																																									(car L): 
																																																																										L: 
																																																																										L: (72.000000 92.000000 93.000000)
																																																																									(car L): 72.000000
																																																																								(lte x (car L)): ()
																																																																								(quote t): 
																																																																								(quote t): t
																																																																								(cons (car L) (insert x (cdr L))): 
																																																																									(car L): 
																																																																										L: 
																																																																										L: (72.000000 92.000000 93.000000)
																																																																									(car L): 72.000000
																																																																									(insert x (cdr L)): 
																																																																										x: 
																																																																										x: 93.000000
																																																																										(cdr L): 
																																																																											L: 
																																																																											L: (72.000000 92.000000 93.000000)
																																																																										(cdr L): (92.000000 93.000000)
																																																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																											(nil? L): 
																																																																												L: 
																																																																												L: (92.000000 93.000000)
																																																																											(nil? L): ()
																																																																											(lte x (car L)): 
																																																																												x: 
																																																																												x: 93.000000
																																																																												(car L): 
																																																																													L: 
																																																																													L: (92.000000 93.000000)
																																																																												(car L): 92.000000
																																																																											(lte x (car L)): ()
																																																																											(quote t): 
																																																																											(quote t): t
																																																																											(cons (car L) (insert x (cdr L))): 
																																																																												(car L): 
																																																																													L: 
																																																																													L: (92.000000 93.000000)
																																																																												(car L): 92.000000
																																																																												(insert x (cdr L)): 
																																																																													x: 
																																																																													x: 93.000000
																																																																													(cdr L): 
																																																																														L: 
																																																																														L: (92.000000 93.000000)
																																																																													(cdr L): (93.000000)
																																																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																														(nil? L): 
																																																																															L: 
																																																																															L: (93.000000)
																																																																														(nil? L): ()
																																																																														(lte x (car L)): 
																																																																															x: 
																																																																															x: 93.000000
																																																																															(car L): 
																																																																																L: 
																																																																																L: (93.000000)
																																																																															(car L): 93.000000
																																																																														(lte x (car L)): t
																																																																														(cons x L): 
																																																																															x: 
																																																																															x: 93.000000
																																																																															L: 
																																																																															L: (93.000000)
																																																																														(cons x L): (93.000000 93.000000)
																																																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (93.000000 93.000000)
																																																																												(insert x (cdr L)): (93.000000 93.000000)
																																																																											(cons (car L) (insert x (cdr L))): (92.000000 93.000000 93.000000)
																																																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (92.000000 93.000000 93.000000)
																																																																									(insert x (cdr L)): (92.000000 93.000000 93.000000)
																																																																								(cons (car L) (insert x (cdr L))): (72.000000 92.000000 93.000000 93.000000)
																																																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (72.000000 92.000000 93.000000 93.000000)
																																																																						(insert x (cdr L)): (72.000000 92.000000 93.000000 93.000000)
																																																																					(cons (car L) (insert x (cdr L))): (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																			(insert x (cdr L)): (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																		(cons (car L) (insert x (cdr L))): (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																(insert x (cdr L)): (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																															(cons (car L) (insert x (cdr L))): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																													(insert x (cdr L)): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																												(cons (car L) (insert x (cdr L))): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																										(insert x (cdr L)): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																									(cons (car L) (insert x (cdr L))): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																							(insert x (cdr L)): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																						(cons (car L) (insert x (cdr L))): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																				(insert x (cdr L)): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																			(cons (car L) (insert x (cdr L))): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																		(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																	(insert x (cdr L)): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																(cons (car L) (insert x (cdr L))): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																															(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																														(insert x (cdr L)): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																													(cons (car L) (insert x (cdr L))): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																											(insert x (cdr L)): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																										(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																								(insert x (cdr L)): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																							(cons (car L) (insert x (cdr L))): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																					(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																				(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																		(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																																			(nil? unsorted): 
																																				unsorted: 
																																				unsorted: (82.000000 17.000000)
																																			(nil? unsorted): ()
																																			(quote t): 
																																			(quote t): t
																																			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																																				(cdr unsorted): 
																																					unsorted: 
																																					unsorted: (82.000000 17.000000)
																																				(cdr unsorted): (17.000000)
																																				(insert (car unsorted) sorted): 
																																					(car unsorted): 
																																						unsorted: 
																																						unsorted: (82.000000 17.000000)
																																					(car unsorted): 82.000000
																																					sorted: 
																																					sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																						(nil? L): 
																																							L: 
																																							L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																						(nil? L): ()
																																						(lte x (car L)): 
																																							x: 
																																							x: 82.000000
																																							(car L): 
																																								L: 
																																								L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																							(car L): 18.000000
																																						(lte x (car L)): ()
																																						(quote t): 
																																						(quote t): t
																																						(cons (car L) (insert x (cdr L))): 
																																							(car L): 
																																								L: 
																																								L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																							(car L): 18.000000
																																							(insert x (cdr L)): 
																																								x: 
																																								x: 82.000000
																																								(cdr L): 
																																									L: 
																																									L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																								(cdr L): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																									(nil? L): 
																																										L: 
																																										L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																									(nil? L): ()
																																									(lte x (car L)): 
																																										x: 
																																										x: 82.000000
																																										(car L): 
																																											L: 
																																											L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																										(car L): 28.000000
																																									(lte x (car L)): ()
																																									(quote t): 
																																									(quote t): t
																																									(cons (car L) (insert x (cdr L))): 
																																										(car L): 
																																											L: 
																																											L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																										(car L): 28.000000
																																										(insert x (cdr L)): 
																																											x: 
																																											x: 82.000000
																																											(cdr L): 
																																												L: 
																																												L: (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																											(cdr L): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																												(nil? L): 
																																													L: 
																																													L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																												(nil? L): ()
																																												(lte x (car L)): 
																																													x: 
																																													x: 82.000000
																																													(car L): 
																																														L: 
																																														L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																													(car L): 36.000000
																																												(lte x (car L)): ()
																																												(quote t): 
																																												(quote t): t
																																												(cons (car L) (insert x (cdr L))): 
																																													(car L): 
																																														L: 
																																														L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																													(car L): 36.000000
																																													(insert x (cdr L)): 
																																														x: 
																																														x: 82.000000
																																														(cdr L): 
																																															L: 
																																															L: (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																														(cdr L): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																															(nil? L): 
																																																L: 
																																																L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																															(nil? L): ()
																																															(lte x (car L)): 
																																																x: 
																																																x: 82.000000
																																																(car L): 
																																																	L: 
																																																	L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																(car L): 38.000000
																																															(lte x (car L)): ()
																																															(quote t): 
																																															(quote t): t
																																															(cons (car L) (insert x (cdr L))): 
																																																(car L): 
																																																	L: 
																																																	L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																(car L): 38.000000
																																																(insert x (cdr L)): 
																																																	x: 
																																																	x: 82.000000
																																																	(cdr L): 
																																																		L: 
																																																		L: (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																	(cdr L): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																		(nil? L): 
																																																			L: 
																																																			L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																		(nil? L): ()
																																																		(lte x (car L)): 
																																																			x: 
																																																			x: 82.000000
																																																			(car L): 
																																																				L: 
																																																				L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																			(car L): 45.000000
																																																		(lte x (car L)): ()
																																																		(quote t): 
																																																		(quote t): t
																																																		(cons (car L) (insert x (cdr L))): 
																																																			(car L): 
																																																				L: 
																																																				L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																			(car L): 45.000000
																																																			(insert x (cdr L)): 
																																																				x: 
																																																				x: 82.000000
																																																				(cdr L): 
																																																					L: 
																																																					L: (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																				(cdr L): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																					(nil? L): 
																																																						L: 
																																																						L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																					(nil? L): ()
																																																					(lte x (car L)): 
																																																						x: 
																																																						x: 82.000000
																																																						(car L): 
																																																							L: 
																																																							L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																						(car L): 46.000000
																																																					(lte x (car L)): ()
																																																					(quote t): 
																																																					(quote t): t
																																																					(cons (car L) (insert x (cdr L))): 
																																																						(car L): 
																																																							L: 
																																																							L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																						(car L): 46.000000
																																																						(insert x (cdr L)): 
																																																							x: 
																																																							x: 82.000000
																																																							(cdr L): 
																																																								L: 
																																																								L: (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																							(cdr L): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																								(nil? L): 
																																																									L: 
																																																									L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																								(nil? L): ()
																																																								(lte x (car L)): 
																																																									x: 
																																																									x: 82.000000
																																																									(car L): 
																																																										L: 
																																																										L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																									(car L): 46.000000
																																																								(lte x (car L)): ()
																																																								(quote t): 
																																																								(quote t): t
																																																								(cons (car L) (insert x (cdr L))): 
																																																									(car L): 
																																																										L: 
																																																										L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																									(car L): 46.000000
																																																									(insert x (cdr L)): 
																																																										x: 
																																																										x: 82.000000
																																																										(cdr L): 
																																																											L: 
																																																											L: (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																										(cdr L): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																											(nil? L): 
																																																												L: 
																																																												L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																											(nil? L): ()
																																																											(lte x (car L)): 
																																																												x: 
																																																												x: 82.000000
																																																												(car L): 
																																																													L: 
																																																													L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																												(car L): 54.000000
																																																											(lte x (car L)): ()
																																																											(quote t): 
																																																											(quote t): t
																																																											(cons (car L) (insert x (cdr L))): 
																																																												(car L): 
																																																													L: 
																																																													L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																												(car L): 54.000000
																																																												(insert x (cdr L)): 
																																																													x: 
																																																													x: 82.000000
																																																													(cdr L): 
																																																														L: 
																																																														L: (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																													(cdr L): (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																														(nil? L): 
																																																															L: 
																																																															L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																														(nil? L): ()
																																																														(lte x (car L)): 
																																																															x: 
																																																															x: 82.000000
																																																															(car L): 
																																																																L: 
																																																																L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																															(car L): 55.000000
																																																														(lte x (car L)): ()
																																																														(quote t): 
																																																														(quote t): t
																																																														(cons (car L) (insert x (cdr L))): 
																																																															(car L): 
																																																																L: 
																																																																L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																															(car L): 55.000000
																																																															(insert x (cdr L)): 
																																																																x: 
																																																																x: 82.000000
																																																																(cdr L): 
																																																																	L: 
																																																																	L: (55.000000 61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																(cdr L): (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																	(nil? L): 
																																																																		L: 
																																																																		L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																	(nil? L): ()
																																																																	(lte x (car L)): 
																																																																		x: 
																																																																		x: 82.000000
																																																																		(car L): 
																																																																			L: 
																																																																			L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																		(car L): 61.000000
																																																																	(lte x (car L)): ()
																																																																	(quote t): 
																																																																	(quote t): t
																																																																	(cons (car L) (insert x (cdr L))): 
																																																																		(car L): 
																																																																			L: 
																																																																			L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																		(car L): 61.000000
																																																																		(insert x (cdr L)): 
																																																																			x: 
																																																																			x: 82.000000
																																																																			(cdr L): 
																																																																				L: 
																																																																				L: (61.000000 70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																			(cdr L): (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																				(nil? L): 
																																																																					L: 
																																																																					L: (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																				(nil? L): ()
																																																																				(lte x (car L)): 
																																																																					x: 
																																																																					x: 82.000000
																																																																					(car L): 
																																																																						L: 
																																																																						L: (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																					(car L): 70.000000
																																																																				(lte x (car L)): ()
																																																																				(quote t): 
																																																																				(quote t): t
																																																																				(cons (car L) (insert x (cdr L))): 
																																																																					(car L): 
																																																																						L: 
																																																																						L: (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																					(car L): 70.000000
																																																																					(insert x (cdr L)): 
																																																																						x: 
																																																																						x: 82.000000
																																																																						(cdr L): 
																																																																							L: 
																																																																							L: (70.000000 71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																						(cdr L): (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																							(nil? L): 
																																																																								L: 
																																																																								L: (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																							(nil? L): ()
																																																																							(lte x (car L)): 
																																																																								x: 
																																																																								x: 82.000000
																																																																								(car L): 
																																																																									L: 
																																																																									L: (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																								(car L): 71.000000
																																																																							(lte x (car L)): ()
																																																																							(quote t): 
																																																																							(quote t): t
																																																																							(cons (car L) (insert x (cdr L))): 
																																																																								(car L): 
																																																																									L: 
																																																																									L: (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																								(car L): 71.000000
																																																																								(insert x (cdr L)): 
																																																																									x: 
																																																																									x: 82.000000
																																																																									(cdr L): 
																																																																										L: 
																																																																										L: (71.000000 72.000000 92.000000 93.000000 93.000000)
																																																																									(cdr L): (72.000000 92.000000 93.000000 93.000000)
																																																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																										(nil? L): 
																																																																											L: 
																																																																											L: (72.000000 92.000000 93.000000 93.000000)
																																																																										(nil? L): ()
																																																																										(lte x (car L)): 
																																																																											x: 
																																																																											x: 82.000000
																																																																											(car L): 
																																																																												L: 
																																																																												L: (72.000000 92.000000 93.000000 93.000000)
																																																																											(car L): 72.000000
																																																																										(lte x (car L)): ()
																																																																										(quote t): 
																																																																										(quote t): t
																																																																										(cons (car L) (insert x (cdr L))): 
																																																																											(car L): 
																																																																												L: 
																																																																												L: (72.000000 92.000000 93.000000 93.000000)
																																																																											(car L): 72.000000
																																																																											(insert x (cdr L)): 
																																																																												x: 
																																																																												x: 82.000000
																																																																												(cdr L): 
																																																																													L: 
																																																																													L: (72.000000 92.000000 93.000000 93.000000)
																																																																												(cdr L): (92.000000 93.000000 93.000000)
																																																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																																																													(nil? L): 
																																																																														L: 
																																																																														L: (92.000000 93.000000 93.000000)
																																																																													(nil? L): ()
																																																																													(lte x (car L)): 
																																																																														x: 
																																																																														x: 82.000000
																																																																														(car L): 
																																																																															L: 
																																																																															L: (92.000000 93.000000 93.000000)
																																																																														(car L): 92.000000
																																																																													(lte x (car L)): t
																																																																													(cons x L): 
																																																																														x: 
																																																																														x: 82.000000
																																																																														L: 
																																																																														L: (92.000000 93.000000 93.000000)
																																																																													(cons x L): (82.000000 92.000000 93.000000 93.000000)
																																																																												(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (82.000000 92.000000 93.000000 93.000000)
																																																																											(insert x (cdr L)): (82.000000 92.000000 93.000000 93.000000)
																																																																										(cons (car L) (insert x (cdr L))): (72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																									(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																								(insert x (cdr L)): (72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																							(cons (car L) (insert x (cdr L))): (71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																						(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																					(insert x (cdr L)): (71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																				(cons (car L) (insert x (cdr L))): (70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																			(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																		(insert x (cdr L)): (70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																	(cons (car L) (insert x (cdr L))): (61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																																(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																															(insert x (cdr L)): (61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																														(cons (car L) (insert x (cdr L))): (55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																													(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																												(insert x (cdr L)): (55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																											(cons (car L) (insert x (cdr L))): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																										(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																									(insert x (cdr L)): (54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																								(cons (car L) (insert x (cdr L))): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																						(insert x (cdr L)): (46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																					(cons (car L) (insert x (cdr L))): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																				(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																			(insert x (cdr L)): (46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																		(cons (car L) (insert x (cdr L))): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																	(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																																(insert x (cdr L)): (45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																															(cons (car L) (insert x (cdr L))): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																														(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																													(insert x (cdr L)): (38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																												(cons (car L) (insert x (cdr L))): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																											(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																										(insert x (cdr L)): (36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																									(cons (car L) (insert x (cdr L))): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																								(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																							(insert x (cdr L)): (28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																						(cons (car L) (insert x (cdr L))): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																					(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																				(insert (car unsorted) sorted): (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																																					(nil? unsorted): 
																																						unsorted: 
																																						unsorted: (17.000000)
																																					(nil? unsorted): ()
																																					(quote t): 
																																					(quote t): t
																																					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): 
																																						(cdr unsorted): 
																																							unsorted: 
																																							unsorted: (17.000000)
																																						(cdr unsorted): ()
																																						(insert (car unsorted) sorted): 
																																							(car unsorted): 
																																								unsorted: 
																																								unsorted: (17.000000)
																																							(car unsorted): 17.000000
																																							sorted: 
																																							sorted: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): 
																																								(nil? L): 
																																									L: 
																																									L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																								(nil? L): ()
																																								(lte x (car L)): 
																																									x: 
																																									x: 17.000000
																																									(car L): 
																																										L: 
																																										L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																									(car L): 18.000000
																																								(lte x (car L)): t
																																								(cons x L): 
																																									x: 
																																									x: 17.000000
																																									L: 
																																									L: (18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																								(cons x L): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																							(cond ((nil? L) (cons x ()) ; tail) ((lte x (car L)) (cons x L) ; head) ((quote t) (cons (car L) (insert x (cdr L))) ; middle)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																						(insert (car unsorted) sorted): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): 
																																							(nil? unsorted): 
																																								unsorted: 
																																								unsorted: ()
																																							(nil? unsorted): t
																																							sorted: 
																																							sorted: (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																	(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																																(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																															(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																														(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																													(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																												(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																											(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																										(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																									(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																								(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																							(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																	(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
																(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
															(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
														(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
													(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
												(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
											(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
										(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
									(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
								(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
							(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
						(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
					(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
				(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
			(INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
		(cond ((nil? unsorted) sorted) ((quote t) (INSERTSORT (cdr unsorted) (insert (car unsorted) sorted)))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
	(INSERTSORT L ()): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
(insertionsort (quote (38.000000 72.000000 61.000000 45.000000 54.000000 36.000000 92.000000 18.000000 70.000000 93.000000 28.000000 71.000000 46.000000 55.000000 46.000000 93.000000 82.000000 17.000000))): (17.000000 18.000000 28.000000 36.000000 38.000000 45.000000 46.000000 46.000000 54.000000 55.000000 61.000000 70.000000 71.000000 72.000000 82.000000 92.000000 93.000000 93.000000)
(quote quicksort): 
(quote quicksort): quicksort
(quicksort ()): 
	(): 
	(): ()
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
		(nil? L): 
			L: 
			L: ()
		(nil? L): t
		(): 
		(): ()
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): ()
(quicksort ()): ()
(quicksort (quote (1.000000))): 
	(quote (1.000000)): 
	(quote (1.000000)): (1.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
		(nil? L): 
			L: 
			L: (1.000000)
		(nil? L): ()
		(nil? (cdr L)): 
			(cdr L): 
				L: 
				L: (1.000000)
			(cdr L): ()
		(nil? (cdr L)): t
		L: 
		L: (1.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (1.000000)
(quicksort (quote (1.000000))): (1.000000)
(quicksort (quote (2.000000 1.000000))): 
	(quote (2.000000 1.000000)): 
	(quote (2.000000 1.000000)): (2.000000 1.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
		(nil? L): 
			L: 
			L: (2.000000 1.000000)
		(nil? L): ()
		(nil? (cdr L)): 
			(cdr L): 
				L: 
				L: (2.000000 1.000000)
			(cdr L): (1.000000)
		(nil? (cdr L)): ()
		(quote t): 
		(quote t): t
		(QSORT (partition (car L) (cdr L) () ())): 
			(partition (car L) (cdr L) () ()): 
				(car L): 
					L: 
					L: (2.000000 1.000000)
				(car L): 2.000000
				(cdr L): 
					L: 
					L: (2.000000 1.000000)
				(cdr L): (1.000000)
				(): 
				(): ()
				(): 
				(): ()
				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
					(nil? L): 
						L: 
						L: (1.000000)
					(nil? L): ()
					(lte (car L) p): 
						(car L): 
							L: 
							L: (1.000000)
						(car L): 1.000000
						p: 
						p: 2.000000
					(lte (car L) p): t
					(partition p (cdr L) (cons (car L) smaller) larger): 
						p: 
						p: 2.000000
						(cdr L): 
							L: 
							L: (1.000000)
						(cdr L): ()
						(cons (car L) smaller): 
							(car L): 
								L: 
								L: (1.000000)
							(car L): 1.000000
							smaller: 
							smaller: ()
						(cons (car L) smaller): (1.000000)
						larger: 
						larger: ()
						(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
							(nil? L): 
								L: 
								L: ()
							(nil? L): t
							(list3 smaller p larger): 
								smaller: 
								smaller: (1.000000)
								p: 
								p: 2.000000
								larger: 
								larger: ()
								(cons a (cons b (cons c ()))): 
									a: 
									a: (1.000000)
									(cons b (cons c ())): 
										b: 
										b: 2.000000
										(cons c ()): 
											c: 
											c: ()
											(): 
											(): ()
										(cons c ()): (())
									(cons b (cons c ())): (2.000000 ())
								(cons a (cons b (cons c ()))): ((1.000000) 2.000000 ())
							(list3 smaller p larger): ((1.000000) 2.000000 ())
						(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000) 2.000000 ())
					(partition p (cdr L) (cons (car L) smaller) larger): ((1.000000) 2.000000 ())
				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000) 2.000000 ())
			(partition (car L) (cdr L) () ()): ((1.000000) 2.000000 ())
			(QKSORT (car P) (cadr P) (caddr P)): 
				(car P): 
					P: 
					P: ((1.000000) 2.000000 ())
				(car P): (1.000000)
				(cadr P): 
					P: 
					P: ((1.000000) 2.000000 ())
					(car (cdr L)): 
						(cdr L): 
							L: 
							L: ((1.000000) 2.000000 ())
						(cdr L): (2.000000 ())
					(car (cdr L)): 2.000000
				(cadr P): 2.000000
				(caddr P): 
					P: 
					P: ((1.000000) 2.000000 ())
					(car (cddr L)): 
						(cddr L): 
							L: 
							L: ((1.000000) 2.000000 ())
							(cdr (cdr L)): 
								(cdr L): 
									L: 
									L: ((1.000000) 2.000000 ())
								(cdr L): (2.000000 ())
							(cdr (cdr L)): (())
						(cddr L): (())
					(car (cddr L)): ()
				(caddr P): ()
				(append (quicksort left) (cons p (quicksort right))): 
					(quicksort left): 
						left: 
						left: (1.000000)
						(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
							(nil? L): 
								L: 
								L: (1.000000)
							(nil? L): ()
							(nil? (cdr L)): 
								(cdr L): 
									L: 
									L: (1.000000)
								(cdr L): ()
							(nil? (cdr L)): t
							L: 
							L: (1.000000)
						(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (1.000000)
					(quicksort left): (1.000000)
					(cons p (quicksort right)): 
						p: 
						p: 2.000000
						(quicksort right): 
							right: 
							right: ()
							(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
								(nil? L): 
									L: 
									L: ()
								(nil? L): t
								(): 
								(): ()
							(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): ()
						(quicksort right): ()
					(cons p (quicksort right)): (2.000000)
					(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
						(nil? L): 
							L: 
							L: (1.000000)
						(nil? L): ()
						(quote t): 
						(quote t): t
						(cons (car L) (append (cdr L) M)): 
							(car L): 
								L: 
								L: (1.000000)
							(car L): 1.000000
							(append (cdr L) M): 
								(cdr L): 
									L: 
									L: (1.000000)
								(cdr L): ()
								M: 
								M: (2.000000)
								(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
									(nil? L): 
										L: 
										L: ()
									(nil? L): t
									M: 
									M: (2.000000)
								(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (2.000000)
							(append (cdr L) M): (2.000000)
						(cons (car L) (append (cdr L) M)): (1.000000 2.000000)
					(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (1.000000 2.000000)
				(append (quicksort left) (cons p (quicksort right))): (1.000000 2.000000)
			(QKSORT (car P) (cadr P) (caddr P)): (1.000000 2.000000)
		(QSORT (partition (car L) (cdr L) () ())): (1.000000 2.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (1.000000 2.000000)
(quicksort (quote (2.000000 1.000000))): (1.000000 2.000000)
(quicksort (quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000))): 
	(quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)): 
	(quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)): (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
		(nil? L): 
			L: 
			L: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
		(nil? L): ()
		(nil? (cdr L)): 
			(cdr L): 
				L: 
				L: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
			(cdr L): (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
		(nil? (cdr L)): ()
		(quote t): 
		(quote t): t
		(QSORT (partition (car L) (cdr L) () ())): 
			(partition (car L) (cdr L) () ()): 
				(car L): 
					L: 
					L: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
				(car L): 3.000000
				(cdr L): 
					L: 
					L: (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
				(cdr L): (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
				(): 
				(): ()
				(): 
				(): ()
				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
					(nil? L): 
						L: 
						L: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
					(nil? L): ()
					(lte (car L) p): 
						(car L): 
							L: 
							L: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
						(car L): 2.000000
						p: 
						p: 3.000000
					(lte (car L) p): t
					(partition p (cdr L) (cons (car L) smaller) larger): 
						p: 
						p: 3.000000
						(cdr L): 
							L: 
							L: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
						(cdr L): (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
						(cons (car L) smaller): 
							(car L): 
								L: 
								L: (2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
							(car L): 2.000000
							smaller: 
							smaller: ()
						(cons (car L) smaller): (2.000000)
						larger: 
						larger: ()
						(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
							(nil? L): 
								L: 
								L: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
							(nil? L): ()
							(lte (car L) p): 
								(car L): 
									L: 
									L: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
								(car L): 1.000000
								p: 
								p: 3.000000
							(lte (car L) p): t
							(partition p (cdr L) (cons (car L) smaller) larger): 
								p: 
								p: 3.000000
								(cdr L): 
									L: 
									L: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
								(cdr L): (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
								(cons (car L) smaller): 
									(car L): 
										L: 
										L: (1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
									(car L): 1.000000
									smaller: 
									smaller: (2.000000)
								(cons (car L) smaller): (1.000000 2.000000)
								larger: 
								larger: ()
								(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
									(nil? L): 
										L: 
										L: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
									(nil? L): ()
									(lte (car L) p): 
										(car L): 
											L: 
											L: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
										(car L): 4.000000
										p: 
										p: 3.000000
									(lte (car L) p): ()
									(quote t): 
									(quote t): t
									(partition p (cdr L) smaller (cons (car L) larger)): 
										p: 
										p: 3.000000
										(cdr L): 
											L: 
											L: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
										(cdr L): (5.000000 6.000000 9.000000 8.000000 7.000000)
										smaller: 
										smaller: (1.000000 2.000000)
										(cons (car L) larger): 
											(car L): 
												L: 
												L: (4.000000 5.000000 6.000000 9.000000 8.000000 7.000000)
											(car L): 4.000000
											larger: 
											larger: ()
										(cons (car L) larger): (4.000000)
										(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
											(nil? L): 
												L: 
												L: (5.000000 6.000000 9.000000 8.000000 7.000000)
											(nil? L): ()
											(lte (car L) p): 
												(car L): 
													L: 
													L: (5.000000 6.000000 9.000000 8.000000 7.000000)
												(car L): 5.000000
												p: 
												p: 3.000000
											(lte (car L) p): ()
											(quote t): 
											(quote t): t
											(partition p (cdr L) smaller (cons (car L) larger)): 
												p: 
												p: 3.000000
												(cdr L): 
													L: 
													L: (5.000000 6.000000 9.000000 8.000000 7.000000)
												(cdr L): (6.000000 9.000000 8.000000 7.000000)
												smaller: 
												smaller: (1.000000 2.000000)
												(cons (car L) larger): 
													(car L): 
														L: 
														L: (5.000000 6.000000 9.000000 8.000000 7.000000)
													(car L): 5.000000
													larger: 
													larger: (4.000000)
												(cons (car L) larger): (5.000000 4.000000)
												(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
													(nil? L): 
														L: 
														L: (6.000000 9.000000 8.000000 7.000000)
													(nil? L): ()
													(lte (car L) p): 
														(car L): 
															L: 
															L: (6.000000 9.000000 8.000000 7.000000)
														(car L): 6.000000
														p: 
														p: 3.000000
													(lte (car L) p): ()
													(quote t): 
													(quote t): t
													(partition p (cdr L) smaller (cons (car L) larger)): 
														p: 
														p: 3.000000
														(cdr L): 
															L: 
															L: (6.000000 9.000000 8.000000 7.000000)
														(cdr L): (9.000000 8.000000 7.000000)
														smaller: 
														smaller: (1.000000 2.000000)
														(cons (car L) larger): 
															(car L): 
																L: 
																L: (6.000000 9.000000 8.000000 7.000000)
															(car L): 6.000000
															larger: 
															larger: (5.000000 4.000000)
														(cons (car L) larger): (6.000000 5.000000 4.000000)
														(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
															(nil? L): 
																L: 
																L: (9.000000 8.000000 7.000000)
															(nil? L): ()
															(lte (car L) p): 
																(car L): 
																	L: 
																	L: (9.000000 8.000000 7.000000)
																(car L): 9.000000
																p: 
																p: 3.000000
															(lte (car L) p): ()
															(quote t): 
															(quote t): t
															(partition p (cdr L) smaller (cons (car L) larger)): 
																p: 
																p: 3.000000
																(cdr L): 
																	L: 
																	L: (9.000000 8.000000 7.000000)
																(cdr L): (8.000000 7.000000)
																smaller: 
																smaller: (1.000000 2.000000)
																(cons (car L) larger): 
																	(car L): 
																		L: 
																		L: (9.000000 8.000000 7.000000)
																	(car L): 9.000000
																	larger: 
																	larger: (6.000000 5.000000 4.000000)
																(cons (car L) larger): (9.000000 6.000000 5.000000 4.000000)
																(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																	(nil? L): 
																		L: 
																		L: (8.000000 7.000000)
																	(nil? L): ()
																	(lte (car L) p): 
																		(car L): 
																			L: 
																			L: (8.000000 7.000000)
																		(car L): 8.000000
																		p: 
																		p: 3.000000
																	(lte (car L) p): ()
																	(quote t): 
																	(quote t): t
																	(partition p (cdr L) smaller (cons (car L) larger)): 
																		p: 
																		p: 3.000000
																		(cdr L): 
																			L: 
																			L: (8.000000 7.000000)
																		(cdr L): (7.000000)
																		smaller: 
																		smaller: (1.000000 2.000000)
																		(cons (car L) larger): 
																			(car L): 
																				L: 
																				L: (8.000000 7.000000)
																			(car L): 8.000000
																			larger: 
																			larger: (9.000000 6.000000 5.000000 4.000000)
																		(cons (car L) larger): (8.000000 9.000000 6.000000 5.000000 4.000000)
																		(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																			(nil? L): 
																				L: 
																				L: (7.000000)
																			(nil? L): ()
																			(lte (car L) p): 
																				(car L): 
																					L: 
																					L: (7.000000)
																				(car L): 7.000000
																				p: 
																				p: 3.000000
																			(lte (car L) p): ()
																			(quote t): 
																			(quote t): t
																			(partition p (cdr L) smaller (cons (car L) larger)): 
																				p: 
																				p: 3.000000
																				(cdr L): 
																					L: 
																					L: (7.000000)
																				(cdr L): ()
																				smaller: 
																				smaller: (1.000000 2.000000)
																				(cons (car L) larger): 
																					(car L): 
																						L: 
																						L: (7.000000)
																					(car L): 7.000000
																					larger: 
																					larger: (8.000000 9.000000 6.000000 5.000000 4.000000)
																				(cons (car L) larger): (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
																				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																					(nil? L): 
																						L: 
																						L: ()
																					(nil? L): t
																					(list3 smaller p larger): 
																						smaller: 
																						smaller: (1.000000 2.000000)
																						p: 
																						p: 3.000000
																						larger: 
																						larger: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
																						(cons a (cons b (cons c ()))): 
																							a: 
																							a: (1.000000 2.000000)
																							(cons b (cons c ())): 
																								b: 
																								b: 3.000000
																								(cons c ()): 
																									c: 
																									c: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
																									(): 
																									(): ()
																								(cons c ()): ((7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																							(cons b (cons c ())): (3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																						(cons a (cons b (cons c ()))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																					(list3 smaller p larger): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																			(partition p (cdr L) smaller (cons (car L) larger)): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																		(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																	(partition p (cdr L) smaller (cons (car L) larger)): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
																(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
															(partition p (cdr L) smaller (cons (car L) larger)): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
														(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
													(partition p (cdr L) smaller (cons (car L) larger)): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
												(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
											(partition p (cdr L) smaller (cons (car L) larger)): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
										(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
									(partition p (cdr L) smaller (cons (car L) larger)): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
								(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
							(partition p (cdr L) (cons (car L) smaller) larger): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
						(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
					(partition p (cdr L) (cons (car L) smaller) larger): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
			(partition (car L) (cdr L) () ()): ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
			(QKSORT (car P) (cadr P) (caddr P)): 
				(car P): 
					P: 
					P: ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
				(car P): (1.000000 2.000000)
				(cadr P): 
					P: 
					P: ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
					(car (cdr L)): 
						(cdr L): 
							L: 
							L: ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
						(cdr L): (3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
					(car (cdr L)): 3.000000
				(cadr P): 3.000000
				(caddr P): 
					P: 
					P: ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
					(car (cddr L)): 
						(cddr L): 
							L: 
							L: ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
							(cdr (cdr L)): 
								(cdr L): 
									L: 
									L: ((1.000000 2.000000) 3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
								(cdr L): (3.000000 (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
							(cdr (cdr L)): ((7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
						(cddr L): ((7.000000 8.000000 9.000000 6.000000 5.000000 4.000000))
					(car (cddr L)): (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
				(caddr P): (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
				(append (quicksort left) (cons p (quicksort right))): 
					(quicksort left): 
						left: 
						left: (1.000000 2.000000)
						(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
							(nil? L): 
								L: 
								L: (1.000000 2.000000)
							(nil? L): ()
							(nil? (cdr L)): 
								(cdr L): 
									L: 
									L: (1.000000 2.000000)
								(cdr L): (2.000000)
							(nil? (cdr L)): ()
							(quote t): 
							(quote t): t
							(QSORT (partition (car L) (cdr L) () ())): 
								(partition (car L) (cdr L) () ()): 
									(car L): 
										L: 
										L: (1.000000 2.000000)
									(car L): 1.000000
									(cdr L): 
										L: 
										L: (1.000000 2.000000)
									(cdr L): (2.000000)
									(): 
									(): ()
									(): 
									(): ()
									(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
										(nil? L): 
											L: 
											L: (2.000000)
										(nil? L): ()
										(lte (car L) p): 
											(car L): 
												L: 
												L: (2.000000)
											(car L): 2.000000
											p: 
											p: 1.000000
										(lte (car L) p): ()
										(quote t): 
										(quote t): t
										(partition p (cdr L) smaller (cons (car L) larger)): 
											p: 
											p: 1.000000
											(cdr L): 
												L: 
												L: (2.000000)
											(cdr L): ()
											smaller: 
											smaller: ()
											(cons (car L) larger): 
												(car L): 
													L: 
													L: (2.000000)
												(car L): 2.000000
												larger: 
												larger: ()
											(cons (car L) larger): (2.000000)
											(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
												(nil? L): 
													L: 
													L: ()
												(nil? L): t
												(list3 smaller p larger): 
													smaller: 
													smaller: ()
													p: 
													p: 1.000000
													larger: 
													larger: (2.000000)
													(cons a (cons b (cons c ()))): 
														a: 
														a: ()
														(cons b (cons c ())): 
															b: 
															b: 1.000000
															(cons c ()): 
																c: 
																c: (2.000000)
																(): 
																(): ()
															(cons c ()): ((2.000000))
														(cons b (cons c ())): (1.000000 (2.000000))
													(cons a (cons b (cons c ()))): (() 1.000000 (2.000000))
												(list3 smaller p larger): (() 1.000000 (2.000000))
											(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): (() 1.000000 (2.000000))
										(partition p (cdr L) smaller (cons (car L) larger)): (() 1.000000 (2.000000))
									(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): (() 1.000000 (2.000000))
								(partition (car L) (cdr L) () ()): (() 1.000000 (2.000000))
								(QKSORT (car P) (cadr P) (caddr P)): 
									(car P): 
										P: 
										P: (() 1.000000 (2.000000))
									(car P): ()
									(cadr P): 
										P: 
										P: (() 1.000000 (2.000000))
										(car (cdr L)): 
											(cdr L): 
												L: 
												L: (() 1.000000 (2.000000))
											(cdr L): (1.000000 (2.000000))
										(car (cdr L)): 1.000000
									(cadr P): 1.000000
									(caddr P): 
										P: 
										P: (() 1.000000 (2.000000))
										(car (cddr L)): 
											(cddr L): 
												L: 
												L: (() 1.000000 (2.000000))
												(cdr (cdr L)): 
													(cdr L): 
														L: 
														L: (() 1.000000 (2.000000))
													(cdr L): (1.000000 (2.000000))
												(cdr (cdr L)): ((2.000000))
											(cddr L): ((2.000000))
										(car (cddr L)): (2.000000)
									(caddr P): (2.000000)
									(append (quicksort left) (cons p (quicksort right))): 
										(quicksort left): 
											left: 
											left: ()
											(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
												(nil? L): 
													L: 
													L: ()
												(nil? L): t
												(): 
												(): ()
											(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): ()
										(quicksort left): ()
										(cons p (quicksort right)): 
											p: 
											p: 1.000000
											(quicksort right): 
												right: 
												right: (2.000000)
												(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
													(nil? L): 
														L: 
														L: (2.000000)
													(nil? L): ()
													(nil? (cdr L)): 
														(cdr L): 
															L: 
															L: (2.000000)
														(cdr L): ()
													(nil? (cdr L)): t
													L: 
													L: (2.000000)
												(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (2.000000)
											(quicksort right): (2.000000)
										(cons p (quicksort right)): (1.000000 2.000000)
										(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
											(nil? L): 
												L: 
												L: ()
											(nil? L): t
											M: 
											M: (1.000000 2.000000)
										(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (1.000000 2.000000)
									(append (quicksort left) (cons p (quicksort right))): (1.000000 2.000000)
								(QKSORT (car P) (cadr P) (caddr P)): (1.000000 2.000000)
							(QSORT (partition (car L) (cdr L) () ())): (1.000000 2.000000)
						(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (1.000000 2.000000)
					(quicksort left): (1.000000 2.000000)
					(cons p (quicksort right)): 
						p: 
						p: 1.000000
						(quicksort right): 
							right: 
							right: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
							(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
								(nil? L): 
									L: 
									L: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
								(nil? L): ()
								(nil? (cdr L)): 
									(cdr L): 
										L: 
										L: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
									(cdr L): (8.000000 9.000000 6.000000 5.000000 4.000000)
								(nil? (cdr L)): ()
								(quote t): 
								(quote t): t
								(QSORT (partition (car L) (cdr L) () ())): 
									(partition (car L) (cdr L) () ()): 
										(car L): 
											L: 
											L: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
										(car L): 7.000000
										(cdr L): 
											L: 
											L: (7.000000 8.000000 9.000000 6.000000 5.000000 4.000000)
										(cdr L): (8.000000 9.000000 6.000000 5.000000 4.000000)
										(): 
										(): ()
										(): 
										(): ()
										(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
											(nil? L): 
												L: 
												L: (8.000000 9.000000 6.000000 5.000000 4.000000)
											(nil? L): ()
											(lte (car L) p): 
												(car L): 
													L: 
													L: (8.000000 9.000000 6.000000 5.000000 4.000000)
												(car L): 8.000000
												p: 
												p: 7.000000
											(lte (car L) p): ()
											(quote t): 
											(quote t): t
											(partition p (cdr L) smaller (cons (car L) larger)): 
												p: 
												p: 7.000000
												(cdr L): 
													L: 
													L: (8.000000 9.000000 6.000000 5.000000 4.000000)
												(cdr L): (9.000000 6.000000 5.000000 4.000000)
												smaller: 
												smaller: ()
												(cons (car L) larger): 
													(car L): 
														L: 
														L: (8.000000 9.000000 6.000000 5.000000 4.000000)
													(car L): 8.000000
													larger: 
													larger: ()
												(cons (car L) larger): (8.000000)
												(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
													(nil? L): 
														L: 
														L: (9.000000 6.000000 5.000000 4.000000)
													(nil? L): ()
													(lte (car L) p): 
														(car L): 
															L: 
															L: (9.000000 6.000000 5.000000 4.000000)
														(car L): 9.000000
														p: 
														p: 7.000000
													(lte (car L) p): ()
													(quote t): 
													(quote t): t
													(partition p (cdr L) smaller (cons (car L) larger)): 
														p: 
														p: 7.000000
														(cdr L): 
															L: 
															L: (9.000000 6.000000 5.000000 4.000000)
														(cdr L): (6.000000 5.000000 4.000000)
														smaller: 
														smaller: ()
														(cons (car L) larger): 
															(car L): 
																L: 
																L: (9.000000 6.000000 5.000000 4.000000)
															(car L): 9.000000
															larger: 
															larger: (8.000000)
														(cons (car L) larger): (9.000000 8.000000)
														(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
															(nil? L): 
																L: 
																L: (6.000000 5.000000 4.000000)
															(nil? L): ()
															(lte (car L) p): 
																(car L): 
																	L: 
																	L: (6.000000 5.000000 4.000000)
																(car L): 6.000000
																p: 
																p: 7.000000
															(lte (car L) p): t
															(partition p (cdr L) (cons (car L) smaller) larger): 
																p: 
																p: 7.000000
																(cdr L): 
																	L: 
																	L: (6.000000 5.000000 4.000000)
																(cdr L): (5.000000 4.000000)
																(cons (car L) smaller): 
																	(car L): 
																		L: 
																		L: (6.000000 5.000000 4.000000)
																	(car L): 6.000000
																	smaller: 
																	smaller: ()
																(cons (car L) smaller): (6.000000)
																larger: 
																larger: (9.000000 8.000000)
																(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																	(nil? L): 
																		L: 
																		L: (5.000000 4.000000)
																	(nil? L): ()
																	(lte (car L) p): 
																		(car L): 
																			L: 
																			L: (5.000000 4.000000)
																		(car L): 5.000000
																		p: 
																		p: 7.000000
																	(lte (car L) p): t
																	(partition p (cdr L) (cons (car L) smaller) larger): 
																		p: 
																		p: 7.000000
																		(cdr L): 
																			L: 
																			L: (5.000000 4.000000)
																		(cdr L): (4.000000)
																		(cons (car L) smaller): 
																			(car L): 
																				L: 
																				L: (5.000000 4.000000)
																			(car L): 5.000000
																			smaller: 
																			smaller: (6.000000)
																		(cons (car L) smaller): (5.000000 6.000000)
																		larger: 
																		larger: (9.000000 8.000000)
																		(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																			(nil? L): 
																				L: 
																				L: (4.000000)
																			(nil? L): ()
																			(lte (car L) p): 
																				(car L): 
																					L: 
																					L: (4.000000)
																				(car L): 4.000000
																				p: 
																				p: 7.000000
																			(lte (car L) p): t
																			(partition p (cdr L) (cons (car L) smaller) larger): 
																				p: 
																				p: 7.000000
																				(cdr L): 
																					L: 
																					L: (4.000000)
																				(cdr L): ()
																				(cons (car L) smaller): 
																					(car L): 
																						L: 
																						L: (4.000000)
																					(car L): 4.000000
																					smaller: 
																					smaller: (5.000000 6.000000)
																				(cons (car L) smaller): (4.000000 5.000000 6.000000)
																				larger: 
																				larger: (9.000000 8.000000)
																				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																					(nil? L): 
																						L: 
																						L: ()
																					(nil? L): t
																					(list3 smaller p larger): 
																						smaller: 
																						smaller: (4.000000 5.000000 6.000000)
																						p: 
																						p: 7.000000
																						larger: 
																						larger: (9.000000 8.000000)
																						(cons a (cons b (cons c ()))): 
																							a: 
																							a: (4.000000 5.000000 6.000000)
																							(cons b (cons c ())): 
																								b: 
																								b: 7.000000
																								(cons c ()): 
																									c: 
																									c: (9.000000 8.000000)
																									(): 
																									(): ()
																								(cons c ()): ((9.000000 8.000000))
																							(cons b (cons c ())): (7.000000 (9.000000 8.000000))
																						(cons a (cons b (cons c ()))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
																					(list3 smaller p larger): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
																				(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
																			(partition p (cdr L) (cons (car L) smaller) larger): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
																		(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
																	(partition p (cdr L) (cons (car L) smaller) larger): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
																(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
															(partition p (cdr L) (cons (car L) smaller) larger): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
														(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
													(partition p (cdr L) smaller (cons (car L) larger)): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
												(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
											(partition p (cdr L) smaller (cons (car L) larger)): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
										(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
									(partition (car L) (cdr L) () ()): ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
									(QKSORT (car P) (cadr P) (caddr P)): 
										(car P): 
											P: 
											P: ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
										(car P): (4.000000 5.000000 6.000000)
										(cadr P): 
											P: 
											P: ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
											(car (cdr L)): 
												(cdr L): 
													L: 
													L: ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
												(cdr L): (7.000000 (9.000000 8.000000))
											(car (cdr L)): 7.000000
										(cadr P): 7.000000
										(caddr P): 
											P: 
											P: ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
											(car (cddr L)): 
												(cddr L): 
													L: 
													L: ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
													(cdr (cdr L)): 
														(cdr L): 
															L: 
															L: ((4.000000 5.000000 6.000000) 7.000000 (9.000000 8.000000))
														(cdr L): (7.000000 (9.000000 8.000000))
													(cdr (cdr L)): ((9.000000 8.000000))
												(cddr L): ((9.000000 8.000000))
											(car (cddr L)): (9.000000 8.000000)
										(caddr P): (9.000000 8.000000)
										(append (quicksort left) (cons p (quicksort right))): 
											(quicksort left): 
												left: 
												left: (4.000000 5.000000 6.000000)
												(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
													(nil? L): 
														L: 
														L: (4.000000 5.000000 6.000000)
													(nil? L): ()
													(nil? (cdr L)): 
														(cdr L): 
															L: 
															L: (4.000000 5.000000 6.000000)
														(cdr L): (5.000000 6.000000)
													(nil? (cdr L)): ()
													(quote t): 
													(quote t): t
													(QSORT (partition (car L) (cdr L) () ())): 
														(partition (car L) (cdr L) () ()): 
															(car L): 
																L: 
																L: (4.000000 5.000000 6.000000)
															(car L): 4.000000
															(cdr L): 
																L: 
																L: (4.000000 5.000000 6.000000)
															(cdr L): (5.000000 6.000000)
															(): 
															(): ()
															(): 
															(): ()
															(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																(nil? L): 
																	L: 
																	L: (5.000000 6.000000)
																(nil? L): ()
																(lte (car L) p): 
																	(car L): 
																		L: 
																		L: (5.000000 6.000000)
																	(car L): 5.000000
																	p: 
																	p: 4.000000
																(lte (car L) p): ()
																(quote t): 
																(quote t): t
																(partition p (cdr L) smaller (cons (car L) larger)): 
																	p: 
																	p: 4.000000
																	(cdr L): 
																		L: 
																		L: (5.000000 6.000000)
																	(cdr L): (6.000000)
																	smaller: 
																	smaller: ()
																	(cons (car L) larger): 
																		(car L): 
																			L: 
																			L: (5.000000 6.000000)
																		(car L): 5.000000
																		larger: 
																		larger: ()
																	(cons (car L) larger): (5.000000)
																	(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																		(nil? L): 
																			L: 
																			L: (6.000000)
																		(nil? L): ()
																		(lte (car L) p): 
																			(car L): 
																				L: 
																				L: (6.000000)
																			(car L): 6.000000
																			p: 
																			p: 4.000000
																		(lte (car L) p): ()
																		(quote t): 
																		(quote t): t
																		(partition p (cdr L) smaller (cons (car L) larger)): 
																			p: 
																			p: 4.000000
																			(cdr L): 
																				L: 
																				L: (6.000000)
																			(cdr L): ()
																			smaller: 
																			smaller: ()
																			(cons (car L) larger): 
																				(car L): 
																					L: 
																					L: (6.000000)
																				(car L): 6.000000
																				larger: 
																				larger: (5.000000)
																			(cons (car L) larger): (6.000000 5.000000)
																			(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																				(nil? L): 
																					L: 
																					L: ()
																				(nil? L): t
																				(list3 smaller p larger): 
																					smaller: 
																					smaller: ()
																					p: 
																					p: 4.000000
																					larger: 
																					larger: (6.000000 5.000000)
																					(cons a (cons b (cons c ()))): 
																						a: 
																						a: ()
																						(cons b (cons c ())): 
																							b: 
																							b: 4.000000
																							(cons c ()): 
																								c: 
																								c: (6.000000 5.000000)
																								(): 
																								(): ()
																							(cons c ()): ((6.000000 5.000000))
																						(cons b (cons c ())): (4.000000 (6.000000 5.000000))
																					(cons a (cons b (cons c ()))): (() 4.000000 (6.000000 5.000000))
																				(list3 smaller p larger): (() 4.000000 (6.000000 5.000000))
																			(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): (() 4.000000 (6.000000 5.000000))
																		(partition p (cdr L) smaller (cons (car L) larger)): (() 4.000000 (6.000000 5.000000))
																	(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): (() 4.000000 (6.000000 5.000000))
																(partition p (cdr L) smaller (cons (car L) larger)): (() 4.000000 (6.000000 5.000000))
															(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): (() 4.000000 (6.000000 5.000000))
														(partition (car L) (cdr L) () ()): (() 4.000000 (6.000000 5.000000))
														(QKSORT (car P) (cadr P) (caddr P)): 
															(car P): 
																P: 
																P: (() 4.000000 (6.000000 5.000000))
															(car P): ()
															(cadr P): 
																P: 
																P: (() 4.000000 (6.000000 5.000000))
																(car (cdr L)): 
																	(cdr L): 
																		L: 
																		L: (() 4.000000 (6.000000 5.000000))
																	(cdr L): (4.000000 (6.000000 5.000000))
																(car (cdr L)): 4.000000
															(cadr P): 4.000000
															(caddr P): 
																P: 
																P: (() 4.000000 (6.000000 5.000000))
																(car (cddr L)): 
																	(cddr L): 
																		L: 
																		L: (() 4.000000 (6.000000 5.000000))
																		(cdr (cdr L)): 
																			(cdr L): 
																				L: 
																				L: (() 4.000000 (6.000000 5.000000))
																			(cdr L): (4.000000 (6.000000 5.000000))
																		(cdr (cdr L)): ((6.000000 5.000000))
																	(cddr L): ((6.000000 5.000000))
																(car (cddr L)): (6.000000 5.000000)
															(caddr P): (6.000000 5.000000)
															(append (quicksort left) (cons p (quicksort right))): 
																(quicksort left): 
																	left: 
																	left: ()
																	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
																		(nil? L): 
																			L: 
																			L: ()
																		(nil? L): t
																		(): 
																		(): ()
																	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): ()
																(quicksort left): ()
																(cons p (quicksort right)): 
																	p: 
																	p: 4.000000
																	(quicksort right): 
																		right: 
																		right: (6.000000 5.000000)
																		(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
																			(nil? L): 
																				L: 
																				L: (6.000000 5.000000)
																			(nil? L): ()
																			(nil? (cdr L)): 
																				(cdr L): 
																					L: 
																					L: (6.000000 5.000000)
																				(cdr L): (5.000000)
																			(nil? (cdr L)): ()
																			(quote t): 
																			(quote t): t
																			(QSORT (partition (car L) (cdr L) () ())): 
																				(partition (car L) (cdr L) () ()): 
																					(car L): 
																						L: 
																						L: (6.000000 5.000000)
																					(car L): 6.000000
																					(cdr L): 
																						L: 
																						L: (6.000000 5.000000)
																					(cdr L): (5.000000)
																					(): 
																					(): ()
																					(): 
																					(): ()
																					(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																						(nil? L): 
																							L: 
																							L: (5.000000)
																						(nil? L): ()
																						(lte (car L) p): 
																							(car L): 
																								L: 
																								L: (5.000000)
																							(car L): 5.000000
																							p: 
																							p: 6.000000
																						(lte (car L) p): t
																						(partition p (cdr L) (cons (car L) smaller) larger): 
																							p: 
																							p: 6.000000
																							(cdr L): 
																								L: 
																								L: (5.000000)
																							(cdr L): ()
																							(cons (car L) smaller): 
																								(car L): 
																									L: 
																									L: (5.000000)
																								(car L): 5.000000
																								smaller: 
																								smaller: ()
																							(cons (car L) smaller): (5.000000)
																							larger: 
																							larger: ()
																							(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																								(nil? L): 
																									L: 
																									L: ()
																								(nil? L): t
																								(list3 smaller p larger): 
																									smaller: 
																									smaller: (5.000000)
																									p: 
																									p: 6.000000
																									larger: 
																									larger: ()
																									(cons a (cons b (cons c ()))): 
																										a: 
																										a: (5.000000)
																										(cons b (cons c ())): 
																											b: 
																											b: 6.000000
																											(cons c ()): 
																												c: 
																												c: ()
																												(): 
																												(): ()
																											(cons c ()): (())
																										(cons b (cons c ())): (6.000000 ())
																									(cons a (cons b (cons c ()))): ((5.000000) 6.000000 ())
																								(list3 smaller p larger): ((5.000000) 6.000000 ())
																							(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((5.000000) 6.000000 ())
																						(partition p (cdr L) (cons (car L) smaller) larger): ((5.000000) 6.000000 ())
																					(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((5.000000) 6.000000 ())
																				(partition (car L) (cdr L) () ()): ((5.000000) 6.000000 ())
																				(QKSORT (car P) (cadr P) (caddr P)): 
																					(car P): 
																						P: 
																						P: ((5.000000) 6.000000 ())
																					(car P): (5.000000)
																					(cadr P): 
																						P: 
																						P: ((5.000000) 6.000000 ())
																						(car (cdr L)): 
																							(cdr L): 
																								L: 
																								L: ((5.000000) 6.000000 ())
																							(cdr L): (6.000000 ())
																						(car (cdr L)): 6.000000
																					(cadr P): 6.000000
																					(caddr P): 
																						P: 
																						P: ((5.000000) 6.000000 ())
																						(car (cddr L)): 
																							(cddr L): 
																								L: 
																								L: ((5.000000) 6.000000 ())
																								(cdr (cdr L)): 
																									(cdr L): 
																										L: 
																										L: ((5.000000) 6.000000 ())
																									(cdr L): (6.000000 ())
																								(cdr (cdr L)): (())
																							(cddr L): (())
																						(car (cddr L)): ()
																					(caddr P): ()
																					(append (quicksort left) (cons p (quicksort right))): 
																						(quicksort left): 
																							left: 
																							left: (5.000000)
																							(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
																								(nil? L): 
																									L: 
																									L: (5.000000)
																								(nil? L): ()
																								(nil? (cdr L)): 
																									(cdr L): 
																										L: 
																										L: (5.000000)
																									(cdr L): ()
																								(nil? (cdr L)): t
																								L: 
																								L: (5.000000)
																							(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (5.000000)
																						(quicksort left): (5.000000)
																						(cons p (quicksort right)): 
																							p: 
																							p: 6.000000
																							(quicksort right): 
																								right: 
																								right: ()
																								(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
																									(nil? L): 
																										L: 
																										L: ()
																									(nil? L): t
																									(): 
																									(): ()
																								(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): ()
																							(quicksort right): ()
																						(cons p (quicksort right)): (6.000000)
																						(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																							(nil? L): 
																								L: 
																								L: (5.000000)
																							(nil? L): ()
																							(quote t): 
																							(quote t): t
																							(cons (car L) (append (cdr L) M)): 
																								(car L): 
																									L: 
																									L: (5.000000)
																								(car L): 5.000000
																								(append (cdr L) M): 
																									(cdr L): 
																										L: 
																										L: (5.000000)
																									(cdr L): ()
																									M: 
																									M: (6.000000)
																									(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																										(nil? L): 
																											L: 
																											L: ()
																										(nil? L): t
																										M: 
																										M: (6.000000)
																									(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (6.000000)
																								(append (cdr L) M): (6.000000)
																							(cons (car L) (append (cdr L) M)): (5.000000 6.000000)
																						(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (5.000000 6.000000)
																					(append (quicksort left) (cons p (quicksort right))): (5.000000 6.000000)
																				(QKSORT (car P) (cadr P) (caddr P)): (5.000000 6.000000)
																			(QSORT (partition (car L) (cdr L) () ())): (5.000000 6.000000)
																		(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (5.000000 6.000000)
																	(quicksort right): (5.000000 6.000000)
																(cons p (quicksort right)): (4.000000 5.000000 6.000000)
																(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																	(nil? L): 
																		L: 
																		L: ()
																	(nil? L): t
																	M: 
																	M: (4.000000 5.000000 6.000000)
																(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (4.000000 5.000000 6.000000)
															(append (quicksort left) (cons p (quicksort right))): (4.000000 5.000000 6.000000)
														(QKSORT (car P) (cadr P) (caddr P)): (4.000000 5.000000 6.000000)
													(QSORT (partition (car L) (cdr L) () ())): (4.000000 5.000000 6.000000)
												(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (4.000000 5.000000 6.000000)
											(quicksort left): (4.000000 5.000000 6.000000)
											(cons p (quicksort right)): 
												p: 
												p: 6.000000
												(quicksort right): 
													right: 
													right: (6.000000 5.000000)
													(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
														(nil? L): 
															L: 
															L: (6.000000 5.000000)
														(nil? L): ()
														(nil? (cdr L)): 
															(cdr L): 
																L: 
																L: (6.000000 5.000000)
															(cdr L): (5.000000)
														(nil? (cdr L)): ()
														(quote t): 
														(quote t): t
														(QSORT (partition (car L) (cdr L) () ())): 
															(partition (car L) (cdr L) () ()): 
																(car L): 
																	L: 
																	L: (6.000000 5.000000)
																(car L): 6.000000
																(cdr L): 
																	L: 
																	L: (6.000000 5.000000)
																(cdr L): (5.000000)
																(): 
																(): ()
																(): 
																(): ()
																(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																	(nil? L): 
																		L: 
																		L: (5.000000)
																	(nil? L): ()
																	(lte (car L) p): 
																		(car L): 
																			L: 
																			L: (5.000000)
																		(car L): 5.000000
																		p: 
																		p: 6.000000
																	(lte (car L) p): t
																	(partition p (cdr L) (cons (car L) smaller) larger): 
																		p: 
																		p: 6.000000
																		(cdr L): 
																			L: 
																			L: (5.000000)
																		(cdr L): ()
																		(cons (car L) smaller): 
																			(car L): 
																				L: 
																				L: (5.000000)
																			(car L): 5.000000
																			smaller: 
																			smaller: ()
																		(cons (car L) smaller): (5.000000)
																		larger: 
																		larger: ()
																		(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): 
																			(nil? L): 
																				L: 
																				L: ()
																			(nil? L): t
																			(list3 smaller p larger): 
																				smaller: 
																				smaller: (5.000000)
																				p: 
																				p: 6.000000
																				larger: 
																				larger: ()
																				(cons a (cons b (cons c ()))): 
																					a: 
																					a: (5.000000)
																					(cons b (cons c ())): 
																						b: 
																						b: 6.000000
																						(cons c ()): 
																							c: 
																							c: ()
																							(): 
																							(): ()
																						(cons c ()): (())
																					(cons b (cons c ())): (6.000000 ())
																				(cons a (cons b (cons c ()))): ((5.000000) 6.000000 ())
																			(list3 smaller p larger): ((5.000000) 6.000000 ())
																		(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((5.000000) 6.000000 ())
																	(partition p (cdr L) (cons (car L) smaller) larger): ((5.000000) 6.000000 ())
																(cond ((nil? L) (list3 smaller p larger)) ((lte (car L) p) (partition p (cdr L) (cons (car L) smaller) larger)) ((quote t) (partition p (cdr L) smaller (cons (car L) larger)))): ((5.000000) 6.000000 ())
															(partition (car L) (cdr L) () ()): ((5.000000) 6.000000 ())
															(QKSORT (car P) (cadr P) (caddr P)): 
																(car P): 
																	P: 
																	P: ((5.000000) 6.000000 ())
																(car P): (5.000000)
																(cadr P): 
																	P: 
																	P: ((5.000000) 6.000000 ())
																	(car (cdr L)): 
																		(cdr L): 
																			L: 
																			L: ((5.000000) 6.000000 ())
																		(cdr L): (6.000000 ())
																	(car (cdr L)): 6.000000
																(cadr P): 6.000000
																(caddr P): 
																	P: 
																	P: ((5.000000) 6.000000 ())
																	(car (cddr L)): 
																		(cddr L): 
																			L: 
																			L: ((5.000000) 6.000000 ())
																			(cdr (cdr L)): 
																				(cdr L): 
																					L: 
																					L: ((5.000000) 6.000000 ())
																				(cdr L): (6.000000 ())
																			(cdr (cdr L)): (())
																		(cddr L): (())
																	(car (cddr L)): ()
																(caddr P): ()
																(append (quicksort left) (cons p (quicksort right))): 
																	(quicksort left): 
																		left: 
																		left: (5.000000)
																		(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
																			(nil? L): 
																				L: 
																				L: (5.000000)
																			(nil? L): ()
																			(nil? (cdr L)): 
																				(cdr L): 
																					L: 
																					L: (5.000000)
																				(cdr L): ()
																			(nil? (cdr L)): t
																			L: 
																			L: (5.000000)
																		(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (5.000000)
																	(quicksort left): (5.000000)
																	(cons p (quicksort right)): 
																		p: 
																		p: 6.000000
																		(quicksort right): 
																			right: 
																			right: ()
																			(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): 
																				(nil? L): 
																					L: 
																					L: ()
																				(nil? L): t
																				(): 
																				(): ()
																			(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): ()
																		(quicksort right): ()
																	(cons p (quicksort right)): (6.000000)
																	(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																		(nil? L): 
																			L: 
																			L: (5.000000)
																		(nil? L): ()
																		(quote t): 
																		(quote t): t
																		(cons (car L) (append (cdr L) M)): 
																			(car L): 
																				L: 
																				L: (5.000000)
																			(car L): 5.000000
																			(append (cdr L) M): 
																				(cdr L): 
																					L: 
																					L: (5.000000)
																				(cdr L): ()
																				M: 
																				M: (6.000000)
																				(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																					(nil? L): 
																						L: 
																						L: ()
																					(nil? L): t
																					M: 
																					M: (6.000000)
																				(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (6.000000)
																			(append (cdr L) M): (6.000000)
																		(cons (car L) (append (cdr L) M)): (5.000000 6.000000)
																	(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (5.000000 6.000000)
																(append (quicksort left) (cons p (quicksort right))): (5.000000 6.000000)
															(QKSORT (car P) (cadr P) (caddr P)): (5.000000 6.000000)
														(QSORT (partition (car L) (cdr L) () ())): (5.000000 6.000000)
													(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (5.000000 6.000000)
												(quicksort right): (5.000000 6.000000)
											(cons p (quicksort right)): (6.000000 5.000000 6.000000)
											(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
												(nil? L): 
													L: 
													L: (4.000000 5.000000 6.000000)
												(nil? L): ()
												(quote t): 
												(quote t): t
												(cons (car L) (append (cdr L) M)): 
													(car L): 
														L: 
														L: (4.000000 5.000000 6.000000)
													(car L): 4.000000
													(append (cdr L) M): 
														(cdr L): 
															L: 
															L: (4.000000 5.000000 6.000000)
														(cdr L): (5.000000 6.000000)
														M: 
														M: (6.000000 5.000000 6.000000)
														(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
															(nil? L): 
																L: 
																L: (5.000000 6.000000)
															(nil? L): ()
															(quote t): 
															(quote t): t
															(cons (car L) (append (cdr L) M)): 
																(car L): 
																	L: 
																	L: (5.000000 6.000000)
																(car L): 5.000000
																(append (cdr L) M): 
																	(cdr L): 
																		L: 
																		L: (5.000000 6.000000)
																	(cdr L): (6.000000)
																	M: 
																	M: (6.000000 5.000000 6.000000)
																	(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																		(nil? L): 
																			L: 
																			L: (6.000000)
																		(nil? L): ()
																		(quote t): 
																		(quote t): t
																		(cons (car L) (append (cdr L) M)): 
																			(car L): 
																				L: 
																				L: (6.000000)
																			(car L): 6.000000
																			(append (cdr L) M): 
																				(cdr L): 
																					L: 
																					L: (6.000000)
																				(cdr L): ()
																				M: 
																				M: (6.000000 5.000000 6.000000)
																				(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
																					(nil? L): 
																						L: 
																						L: ()
																					(nil? L): t
																					M: 
																					M: (6.000000 5.000000 6.000000)
																				(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (6.000000 5.000000 6.000000)
																			(append (cdr L) M): (6.000000 5.000000 6.000000)
																		(cons (car L) (append (cdr L) M)): (6.000000 6.000000 5.000000 6.000000)
																	(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (6.000000 6.000000 5.000000 6.000000)
																(append (cdr L) M): (6.000000 6.000000 5.000000 6.000000)
															(cons (car L) (append (cdr L) M)): (5.000000 6.000000 6.000000 5.000000 6.000000)
														(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (5.000000 6.000000 6.000000 5.000000 6.000000)
													(append (cdr L) M): (5.000000 6.000000 6.000000 5.000000 6.000000)
												(cons (car L) (append (cdr L) M)): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
											(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
										(append (quicksort left) (cons p (quicksort right))): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
									(QKSORT (car P) (cadr P) (caddr P)): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
								(QSORT (partition (car L) (cdr L) () ())): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
							(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
						(quicksort right): (4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
					(cons p (quicksort right)): (1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
					(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
						(nil? L): 
							L: 
							L: (1.000000 2.000000)
						(nil? L): ()
						(quote t): 
						(quote t): t
						(cons (car L) (append (cdr L) M)): 
							(car L): 
								L: 
								L: (1.000000 2.000000)
							(car L): 1.000000
							(append (cdr L) M): 
								(cdr L): 
									L: 
									L: (1.000000 2.000000)
								(cdr L): (2.000000)
								M: 
								M: (1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
								(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
									(nil? L): 
										L: 
										L: (2.000000)
									(nil? L): ()
									(quote t): 
									(quote t): t
									(cons (car L) (append (cdr L) M)): 
										(car L): 
											L: 
											L: (2.000000)
										(car L): 2.000000
										(append (cdr L) M): 
											(cdr L): 
												L: 
												L: (2.000000)
											(cdr L): ()
											M: 
											M: (1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
											(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): 
												(nil? L): 
													L: 
													L: ()
												(nil? L): t
												M: 
												M: (1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
											(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
										(append (cdr L) M): (1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
									(cons (car L) (append (cdr L) M)): (2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
								(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
							(append (cdr L) M): (2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
						(cons (car L) (append (cdr L) M)): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
					(cond ((nil? L) M) ((quote t) (cons (car L) (append (cdr L) M)))): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
				(append (quicksort left) (cons p (quicksort right))): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
			(QKSORT (car P) (cadr P) (caddr P)): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
		(QSORT (partition (car L) (cdr L) () ())): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
	(cond ((nil? L) ()) ((nil? (cdr L)) L) ((quote t) (QSORT (partition (car L) (cdr L) () ())))): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
(quicksort (quote (3.000000 2.000000 1.000000 4.000000 5.000000 6.000000 9.000000 8.000000 7.000000))): (1.000000 2.000000 1.000000 4.000000 5.000000 6.000000 6.000000 5.000000 6.000000)
SExpr {
	type: CONS
	forward_ptr: (nil)
	car: 0x55555558dee0 SExpr {
		type: NUMBER
		forward_ptr: (nil)
		number: 1.000000
	}
	cdr: 0x55555558def8 SExpr {
		type: CONS
		forward_ptr: (nil)
		car: 0x55555558df18 SExpr {
			type: NUMBER
			forward_ptr: (nil)
			number: 2.000000
		}
		cdr: 0x55555558df30 SExpr {
			type: CONS
			forward_ptr: (nil)
			car: 0x55555558dee0 SExpr {
				type: NUMBER
				forward_ptr: (nil)
				number: 1.000000
			}
			cdr: 0x55555558df50 SExpr {
				type: CONS
				forward_ptr: (nil)
				car: 0x55555558df70 SExpr {
					type: NUMBER
					forward_ptr: (nil)
					number: 4.000000
				}
				cdr: 0x55555558df88 SExpr {
					type: CONS
					forward_ptr: (nil)
					car: 0x55555558dfa8 SExpr {
						type: NUMBER
						forward_ptr: (nil)
						number: 5.000000
					}
					cdr: 0x55555558dfc0 SExpr {
						type: CONS
						forward_ptr: (nil)
						car: 0x55555558dfe0 SExpr {
							type: NUMBER
							forward_ptr: (nil)
							number: 6.000000
						}
						cdr: 0x55555558dff8 SExpr {
							type: CONS
							forward_ptr: (nil)
							car: 0x55555558dfe0 SExpr {
								type: NUMBER
								forward_ptr: (nil)
								number: 6.000000
							}
							cdr: 0x55555558e018 SExpr {
								type: CONS
								forward_ptr: (nil)
								car: 0x55555558dfa8 SExpr {
									type: NUMBER
									forward_ptr: (nil)
									number: 5.000000
								}
								cdr: 0x55555558e038 SExpr {
									type: CONS
									forward_ptr: (nil)
									car: 0x55555558dfe0 SExpr {
										type: NUMBER
										forward_ptr: (nil)
										number: 6.000000
									}
									cdr: (nil) NIL
								}
							}
						}
					}
				}
			}
		}
	}
}
SExpr {
	type: CONS
	forward_ptr: (nil)
	car: 0x55555558e078 SExpr {
		type: NUMBER
		forward_ptr: (nil)
		number: 1.000000
	}
	cdr: 0x55555558e090 SExpr {
		type: CONS
		forward_ptr: (nil)
		car: 0x55555558e0b0 SExpr {
			type: NUMBER
			forward_ptr: (nil)
			number: 2.000000
		}
		cdr: 0x55555558e0c8 SExpr {
			type: CONS
			forward_ptr: (nil)
			car: 0x55555558e0e8 SExpr {
				type: NUMBER
				forward_ptr: (nil)
				number: 3.000000
			}
			cdr: 0x55555558e100 SExpr {
				type: CONS
				forward_ptr: (nil)
				car: 0x55555558e120 SExpr {
					type: NUMBER
					forward_ptr: (nil)
					number: 4.000000
				}
				cdr: 0x55555558e138 SExpr {
					type: CONS
					forward_ptr: (nil)
					car: 0x55555558e158 SExpr {
						type: NUMBER
						forward_ptr: (nil)
						number: 5.000000
					}
					cdr: 0x55555558e170 SExpr {
						type: CONS
						forward_ptr: (nil)
						car: 0x55555558e190 SExpr {
							type: NUMBER
							forward_ptr: (nil)
							number: 6.000000
						}
						cdr: 0x55555558e1a8 SExpr {
							type: CONS
							forward_ptr: (nil)
							car: 0x55555558e1c8 SExpr {
								type: NUMBER
								forward_ptr: (nil)
								number: 7.000000
							}
							cdr: 0x55555558e1e0 SExpr {
								type: CONS
								forward_ptr: (nil)
								car: 0x55555558e200 SExpr {
									type: NUMBER
									forward_ptr: (nil)
									number: 8.000000
								}
								cdr: 0x55555558e230 SExpr {
									type: CONS
									forward_ptr: (nil)
									car: 0x55555558e218 SExpr {
										type: NUMBER
										forward_ptr: (nil)
										number: 9.000000
									}
									cdr: (nil) NIL
								}
							}
						}
					}
				}
			}
		}
	}
}
❌: sort
test results: FAILED. 52 passed; 2 failed
